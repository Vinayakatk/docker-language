grammar org.eclipse.docker.compose.Compose with org.eclipse.xtext.common.Terminals

generate compose "http://www.eclipse.org/docker/compose/Compose"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Compose:
	(services+=RootServices | volumes+=RootVolumes | networks+=RootNetworks)*
	
;

RootNetworks:
	'Networks' '{'networks+=RootNetwork*'}' 
;

RootVolumes:
	 'Volumes' '{'volumes+=RootVolume* ')'
;

RootVolume:
	'volume' name=ID '{'
	  ((driver=ID? 
	  driverOptions=Map?)|
	  external=External?)
	  '}'
;

RootNetwork:
	'network' name=ID '{'
	  ((driver=ID? 
	  driverOptions=Map?
	  ipam=Ipam?
	  )
	  |
	  external=External?)
	  '}'
;

Ipam:
	driver=ID
	('config' '{'
		('subnet' subnet=Subnet)?
		('IP-range' range=Subnet)?
		('Gateway' gateway= Namespace)?
		('aus-address' '{'hosts+=Host*'}')? 
		'}' )?
;

Host:
	hostID=Namespace
;

External:
	'external' (isExternal=EBoolean |('{' name=ID '}')) 
;

Map:
	(name=ID '=>'value=CombinedPath)*
;

RootServices:
'Services' '{'services += Service* '}'	
;
Service:
	'service-configuration'	name=ID '{' containername=ContainerName? elements+=Element*
			'}'
;

Element:
	Image |
	Build |
	AlternateDocFile |
	Links |
	Ports |
	Expose |
	Volumes | Networks | Network_Mode
	
;

Network_Mode:
	'network_mode' 
		value="bridge"|
		"host"|
		"none"|
		"service:[service name]"|
		"container:[container name]"
;

Volumes:
	'volumes' '{'volumes=Volume* '}' 
;

Volume:
	location=CombinedPath   | (ref=[RootVolume]':'path=CombinedPath)
;

CombinedPath returns ecore::EString:
	Path (':' Path)*
;
volumes_from:
	from+=('service_name'|'service_name:ro'|'container:container_name'|'container:container_name:ro')*
;

Networks:
	'Networks'
;

ContainerName:
	'Container-Name' name=ID
;

Expose:
	'Expose' '{'
		ports+=Port*
		'}'
;

Ports:
	'Ports' '{'
		ports+=Port*
		'}'
;

Port:
	'port' name=PortType
;

Links:
	'Links' '{'
		links+=Link*
		'}' 
;

Link :
	'link' ref= [Service] ('(' alias=ID')')?
	
;

AlternateDocFile:
	'Docker-file' value=STRING
;

Image:
	'Image' (tag=ID '/')? name=ID
;

Build :
	'Build' value=CombinedPath
;

Path returns ecore::EString:
	('..' '/'?|'.' '/'?|'~' '/'?|'/'|ID '/'?|'\\')*
	
;
Cpu_Share:'Cpu_Shares' value=INT;
cpu_Quota:'cpu_Quota' value=INT;
cpuset:'cpuset' value=LIST;

LIST:
	INT (','INT)*
;
EBoolean returns ecore::EBoolean:
	'false' | 'true';
	
Namespace:ID ('.' ID)*;
user:'user' value=ID;
workdir:'workdir' dir=Path;
domain_name:'domain_name' value=Namespace;
hostName:'hostName' value=Namespace;
ipc:'ipc' value=Namespace;
mac_address:'mac_address' value=Namespace;
mem_Limit:'mem_Limit' limit=INT;
mem_swap_limit:'mem_swap_limit' limit=INT;
privilaged: 'privilaged' value=EBoolean;
restart:'restart' value='always';
tty:'tty'value=EBoolean;
read_only:'read_only'value=EBoolean;
stdin_open:'stdin_open' value=EBoolean;

Subnet returns ecore::EString:
	ID ('.' ID)* ('/' INT)?
;

PortType returns ecore::EString:
	ID ((':'|'-'|'.') ID)*
;