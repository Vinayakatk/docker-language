/**
 */
package org.eclipse.docker.language.container.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.docker.language.container.util.ContainerAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ContainerItemProviderAdapterFactory extends ContainerAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ContainerItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.Docker} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DockerItemProvider dockerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.Docker}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDockerAdapter() {
		if (dockerItemProvider == null) {
			dockerItemProvider = new DockerItemProvider(this);
		}

		return dockerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.ImportContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportContainerItemProvider importContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.ImportContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportContainerAdapter() {
		if (importContainerItemProvider == null) {
			importContainerItemProvider = new ImportContainerItemProvider(this);
		}

		return importContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.ContainerSection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerSectionItemProvider containerSectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.ContainerSection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerSectionAdapter() {
		if (containerSectionItemProvider == null) {
			containerSectionItemProvider = new ContainerSectionItemProvider(this);
		}

		return containerSectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.ImageSection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageSectionItemProvider imageSectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.ImageSection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageSectionAdapter() {
		if (imageSectionItemProvider == null) {
			imageSectionItemProvider = new ImageSectionItemProvider(this);
		}

		return imageSectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.Image} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageItemProvider imageItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.Image}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageAdapter() {
		if (imageItemProvider == null) {
			imageItemProvider = new ImageItemProvider(this);
		}

		return imageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.BuildArgs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuildArgsItemProvider buildArgsItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.BuildArgs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuildArgsAdapter() {
		if (buildArgsItemProvider == null) {
			buildArgsItemProvider = new BuildArgsItemProvider(this);
		}

		return buildArgsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.Container} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerItemProvider containerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.Container}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerAdapter() {
		if (containerItemProvider == null) {
			containerItemProvider = new ContainerItemProvider(this);
		}

		return containerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.VolumesFrom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VolumesFromItemProvider volumesFromItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.VolumesFrom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVolumesFromAdapter() {
		if (volumesFromItemProvider == null) {
			volumesFromItemProvider = new VolumesFromItemProvider(this);
		}

		return volumesFromItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.RestartPolicy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestartPolicyItemProvider restartPolicyItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.RestartPolicy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestartPolicyAdapter() {
		if (restartPolicyItemProvider == null) {
			restartPolicyItemProvider = new RestartPolicyItemProvider(this);
		}

		return restartPolicyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.PortBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortBindingItemProvider portBindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.PortBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortBindingAdapter() {
		if (portBindingItemProvider == null) {
			portBindingItemProvider = new PortBindingItemProvider(this);
		}

		return portBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.Binding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BindingItemProvider bindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.Binding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBindingAdapter() {
		if (bindingItemProvider == null) {
			bindingItemProvider = new BindingItemProvider(this);
		}

		return bindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.Ulimit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UlimitItemProvider ulimitItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.Ulimit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUlimitAdapter() {
		if (ulimitItemProvider == null) {
			ulimitItemProvider = new UlimitItemProvider(this);
		}

		return ulimitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.Label} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelItemProvider labelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.Label}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabelAdapter() {
		if (labelItemProvider == null) {
			labelItemProvider = new LabelItemProvider(this);
		}

		return labelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.ExposedPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExposedPortItemProvider exposedPortItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.ExposedPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExposedPortAdapter() {
		if (exposedPortItemProvider == null) {
			exposedPortItemProvider = new ExposedPortItemProvider(this);
		}

		return exposedPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.Device} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviceItemProvider deviceItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.Device}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeviceAdapter() {
		if (deviceItemProvider == null) {
			deviceItemProvider = new DeviceItemProvider(this);
		}

		return deviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.Bind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BindItemProvider bindItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.Bind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBindAdapter() {
		if (bindItemProvider == null) {
			bindItemProvider = new BindItemProvider(this);
		}

		return bindItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.docker.language.container.Volume} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VolumeItemProvider volumeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.docker.language.container.Volume}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVolumeAdapter() {
		if (volumeItemProvider == null) {
			volumeItemProvider = new VolumeItemProvider(this);
		}

		return volumeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dockerItemProvider != null) dockerItemProvider.dispose();
		if (importContainerItemProvider != null) importContainerItemProvider.dispose();
		if (containerSectionItemProvider != null) containerSectionItemProvider.dispose();
		if (imageSectionItemProvider != null) imageSectionItemProvider.dispose();
		if (imageItemProvider != null) imageItemProvider.dispose();
		if (buildArgsItemProvider != null) buildArgsItemProvider.dispose();
		if (containerItemProvider != null) containerItemProvider.dispose();
		if (volumesFromItemProvider != null) volumesFromItemProvider.dispose();
		if (restartPolicyItemProvider != null) restartPolicyItemProvider.dispose();
		if (portBindingItemProvider != null) portBindingItemProvider.dispose();
		if (bindingItemProvider != null) bindingItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (ulimitItemProvider != null) ulimitItemProvider.dispose();
		if (labelItemProvider != null) labelItemProvider.dispose();
		if (exposedPortItemProvider != null) exposedPortItemProvider.dispose();
		if (deviceItemProvider != null) deviceItemProvider.dispose();
		if (bindItemProvider != null) bindItemProvider.dispose();
		if (volumeItemProvider != null) volumeItemProvider.dispose();
	}

}
