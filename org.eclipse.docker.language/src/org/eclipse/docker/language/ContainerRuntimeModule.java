/*
 * generated by Xtext
 */
package org.eclipse.docker.language;

import java.util.Properties;

import javax.inject.Named;

import org.eclipse.docker.language.transformation.ContainerTransformation;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.impl.ImportUriGlobalScopeProvider;

import com.github.dockerjava.api.DockerClient;
import com.google.common.eventbus.EventBus;
import com.google.inject.Binder;
import com.google.inject.Scope;
import com.google.inject.Scopes;
import com.google.inject.internal.BindingBuilder;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class ContainerRuntimeModule extends org.eclipse.docker.language.AbstractContainerRuntimeModule {
	 
	@Override
	public void configure(Binder binder) {
		binder.bind(DockerInterpreter.class).to(DockerInterpreterImpl.class);
		binder.bind(DockerClient.class).toProvider(DockerClientProvider.class);
		binder.bind(EventBus.class).in(Scopes.SINGLETON);
		binder.bind(ContainerTransformation.class).in(Scopes.SINGLETON);;
		super.configure(binder);
	}
	
	@Override
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return ImportUriGlobalScopeProvider.class;
	}
	
	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class).annotatedWith(
				com.google.inject.name.Names.named(org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(
						org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider.class);
		
	}
	
	

}
