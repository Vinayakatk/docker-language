/*
 * generated by Xtext
 */
package org.eclipse.docker.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ContainerGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DockerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.Docker");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cContainersAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cContainersContainerParserRuleCall_0_0 = (RuleCall)cContainersAssignment_0.eContents().get(0);
		private final Assignment cImagesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cImagesImageParserRuleCall_1_0 = (RuleCall)cImagesAssignment_1.eContents().get(0);
		
		//Docker:
		//	(containers+=Container | images+=Image)*;
		@Override public ParserRule getRule() { return rule; }

		//(containers+=Container | images+=Image)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//containers+=Container
		public Assignment getContainersAssignment_0() { return cContainersAssignment_0; }

		//Container
		public RuleCall getContainersContainerParserRuleCall_0_0() { return cContainersContainerParserRuleCall_0_0; }

		////		networks+=Network | volumes+=Volume
		//images+=Image
		public Assignment getImagesAssignment_1() { return cImagesAssignment_1; }

		//Image
		public RuleCall getImagesImageParserRuleCall_1_0() { return cImagesImageParserRuleCall_1_0; }
	}

	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cTagKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTagAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTagSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cTagAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cDockerFileDirKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDockerFileDirAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cDockerFileDirSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cDockerFileDirAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cBuildArgKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cBuildargsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cBuildargsBuildArgsParserRuleCall_3_2_1_0 = (RuleCall)cBuildargsAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cNoCacheKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cNoCacheAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cNoCacheEBooleanParserRuleCall_3_3_1_0 = (RuleCall)cNoCacheAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cMemoryKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cMemoryAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cMemoryElongParserRuleCall_3_4_1_0 = (RuleCall)cMemoryAssignment_3_4_1.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cMemswapKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cMemswapAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cMemswapElongParserRuleCall_3_5_1_0 = (RuleCall)cMemswapAssignment_3_5_1.eContents().get(0);
		private final Group cGroup_3_6 = (Group)cUnorderedGroup_3.eContents().get(6);
		private final Keyword cCpusetcpusKeyword_3_6_0 = (Keyword)cGroup_3_6.eContents().get(0);
		private final Assignment cCpusetcpusAssignment_3_6_1 = (Assignment)cGroup_3_6.eContents().get(1);
		private final RuleCall cCpusetcpusSTRINGTerminalRuleCall_3_6_1_0 = (RuleCall)cCpusetcpusAssignment_3_6_1.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cUnorderedGroup_3.eContents().get(7);
		private final Keyword cCpusharesKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Assignment cCpusharesAssignment_3_7_1 = (Assignment)cGroup_3_7.eContents().get(1);
		private final RuleCall cCpusharesSTRINGTerminalRuleCall_3_7_1_0 = (RuleCall)cCpusharesAssignment_3_7_1.eContents().get(0);
		private final Group cGroup_3_8 = (Group)cUnorderedGroup_3.eContents().get(8);
		private final Keyword cRemoveKeyword_3_8_0 = (Keyword)cGroup_3_8.eContents().get(0);
		private final Assignment cRemoveAssignment_3_8_1 = (Assignment)cGroup_3_8.eContents().get(1);
		private final RuleCall cRemoveEBooleanParserRuleCall_3_8_1_0 = (RuleCall)cRemoveAssignment_3_8_1.eContents().get(0);
		private final Group cGroup_3_9 = (Group)cUnorderedGroup_3.eContents().get(9);
		private final Keyword cQuietKeyword_3_9_0 = (Keyword)cGroup_3_9.eContents().get(0);
		private final Assignment cQuietAssignment_3_9_1 = (Assignment)cGroup_3_9.eContents().get(1);
		private final RuleCall cQuietEBooleanParserRuleCall_3_9_1_0 = (RuleCall)cQuietAssignment_3_9_1.eContents().get(0);
		private final Group cGroup_3_10 = (Group)cUnorderedGroup_3.eContents().get(10);
		private final Keyword cPullKeyword_3_10_0 = (Keyword)cGroup_3_10.eContents().get(0);
		private final Assignment cPullAssignment_3_10_1 = (Assignment)cGroup_3_10.eContents().get(1);
		private final RuleCall cPullEBooleanParserRuleCall_3_10_1_0 = (RuleCall)cPullAssignment_3_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Image:
		//	'image' name=STRING '{' (('tag' tag=STRING)? & ('dockerFileDir' dockerFileDir=STRING)? & ('buildArg'
		//	buildargs=BuildArgs+)? & ('noCache' noCache=EBoolean)? & ('memory' memory=Elong)? & ('memswap' memswap=Elong)? &
		//	('cpusetcpus' cpusetcpus=STRING)? & ('cpushares' cpushares=STRING)? & ('remove' remove=EBoolean)? & ('quiet'
		//	quiet=EBoolean)? & ('pull' pull=EBoolean)?)
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'image' name=STRING '{' (('tag' tag=STRING)? & ('dockerFileDir' dockerFileDir=STRING)? & ('buildArg'
		//buildargs=BuildArgs+)? & ('noCache' noCache=EBoolean)? & ('memory' memory=Elong)? & ('memswap' memswap=Elong)? &
		//('cpusetcpus' cpusetcpus=STRING)? & ('cpushares' cpushares=STRING)? & ('remove' remove=EBoolean)? & ('quiet'
		//quiet=EBoolean)? & ('pull' pull=EBoolean)?) '}'
		public Group getGroup() { return cGroup; }

		//'image'
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(('tag' tag=STRING)? & ('dockerFileDir' dockerFileDir=STRING)? & ('buildArg' buildargs=BuildArgs+)? & ('noCache'
		//noCache=EBoolean)? & ('memory' memory=Elong)? & ('memswap' memswap=Elong)? & ('cpusetcpus' cpusetcpus=STRING)? &
		//('cpushares' cpushares=STRING)? & ('remove' remove=EBoolean)? & ('quiet' quiet=EBoolean)? & ('pull' pull=EBoolean)?)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//('tag' tag=STRING)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//'tag'
		public Keyword getTagKeyword_3_0_0() { return cTagKeyword_3_0_0; }

		//tag=STRING
		public Assignment getTagAssignment_3_0_1() { return cTagAssignment_3_0_1; }

		//STRING
		public RuleCall getTagSTRINGTerminalRuleCall_3_0_1_0() { return cTagSTRINGTerminalRuleCall_3_0_1_0; }

		//('dockerFileDir' dockerFileDir=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//'dockerFileDir'
		public Keyword getDockerFileDirKeyword_3_1_0() { return cDockerFileDirKeyword_3_1_0; }

		//dockerFileDir=STRING
		public Assignment getDockerFileDirAssignment_3_1_1() { return cDockerFileDirAssignment_3_1_1; }

		//STRING
		public RuleCall getDockerFileDirSTRINGTerminalRuleCall_3_1_1_0() { return cDockerFileDirSTRINGTerminalRuleCall_3_1_1_0; }

		//('buildArg' buildargs=BuildArgs+)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//'buildArg'
		public Keyword getBuildArgKeyword_3_2_0() { return cBuildArgKeyword_3_2_0; }

		//buildargs=BuildArgs+
		public Assignment getBuildargsAssignment_3_2_1() { return cBuildargsAssignment_3_2_1; }

		//BuildArgs
		public RuleCall getBuildargsBuildArgsParserRuleCall_3_2_1_0() { return cBuildargsBuildArgsParserRuleCall_3_2_1_0; }

		//('noCache' noCache=EBoolean)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//'noCache'
		public Keyword getNoCacheKeyword_3_3_0() { return cNoCacheKeyword_3_3_0; }

		//noCache=EBoolean
		public Assignment getNoCacheAssignment_3_3_1() { return cNoCacheAssignment_3_3_1; }

		//EBoolean
		public RuleCall getNoCacheEBooleanParserRuleCall_3_3_1_0() { return cNoCacheEBooleanParserRuleCall_3_3_1_0; }

		//('memory' memory=Elong)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//'memory'
		public Keyword getMemoryKeyword_3_4_0() { return cMemoryKeyword_3_4_0; }

		//memory=Elong
		public Assignment getMemoryAssignment_3_4_1() { return cMemoryAssignment_3_4_1; }

		//Elong
		public RuleCall getMemoryElongParserRuleCall_3_4_1_0() { return cMemoryElongParserRuleCall_3_4_1_0; }

		//('memswap' memswap=Elong)?
		public Group getGroup_3_5() { return cGroup_3_5; }

		//'memswap'
		public Keyword getMemswapKeyword_3_5_0() { return cMemswapKeyword_3_5_0; }

		//memswap=Elong
		public Assignment getMemswapAssignment_3_5_1() { return cMemswapAssignment_3_5_1; }

		//Elong
		public RuleCall getMemswapElongParserRuleCall_3_5_1_0() { return cMemswapElongParserRuleCall_3_5_1_0; }

		//('cpusetcpus' cpusetcpus=STRING)?
		public Group getGroup_3_6() { return cGroup_3_6; }

		//'cpusetcpus'
		public Keyword getCpusetcpusKeyword_3_6_0() { return cCpusetcpusKeyword_3_6_0; }

		//cpusetcpus=STRING
		public Assignment getCpusetcpusAssignment_3_6_1() { return cCpusetcpusAssignment_3_6_1; }

		//STRING
		public RuleCall getCpusetcpusSTRINGTerminalRuleCall_3_6_1_0() { return cCpusetcpusSTRINGTerminalRuleCall_3_6_1_0; }

		//('cpushares' cpushares=STRING)?
		public Group getGroup_3_7() { return cGroup_3_7; }

		//'cpushares'
		public Keyword getCpusharesKeyword_3_7_0() { return cCpusharesKeyword_3_7_0; }

		//cpushares=STRING
		public Assignment getCpusharesAssignment_3_7_1() { return cCpusharesAssignment_3_7_1; }

		//STRING
		public RuleCall getCpusharesSTRINGTerminalRuleCall_3_7_1_0() { return cCpusharesSTRINGTerminalRuleCall_3_7_1_0; }

		//('remove' remove=EBoolean)?
		public Group getGroup_3_8() { return cGroup_3_8; }

		//'remove'
		public Keyword getRemoveKeyword_3_8_0() { return cRemoveKeyword_3_8_0; }

		//remove=EBoolean
		public Assignment getRemoveAssignment_3_8_1() { return cRemoveAssignment_3_8_1; }

		//EBoolean
		public RuleCall getRemoveEBooleanParserRuleCall_3_8_1_0() { return cRemoveEBooleanParserRuleCall_3_8_1_0; }

		//('quiet' quiet=EBoolean)?
		public Group getGroup_3_9() { return cGroup_3_9; }

		//'quiet'
		public Keyword getQuietKeyword_3_9_0() { return cQuietKeyword_3_9_0; }

		//quiet=EBoolean
		public Assignment getQuietAssignment_3_9_1() { return cQuietAssignment_3_9_1; }

		//EBoolean
		public RuleCall getQuietEBooleanParserRuleCall_3_9_1_0() { return cQuietEBooleanParserRuleCall_3_9_1_0; }

		//('pull' pull=EBoolean)?
		public Group getGroup_3_10() { return cGroup_3_10; }

		//'pull'
		public Keyword getPullKeyword_3_10_0() { return cPullKeyword_3_10_0; }

		//pull=EBoolean
		public Assignment getPullAssignment_3_10_1() { return cPullAssignment_3_10_1; }

		//EBoolean
		public RuleCall getPullEBooleanParserRuleCall_3_10_1_0() { return cPullEBooleanParserRuleCall_3_10_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BuildArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.BuildArgs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeySTRINGTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//BuildArgs:
		//	'-' key=STRING value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'-' key=STRING value=STRING
		public Group getGroup() { return cGroup; }

		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//key=STRING
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_1_0() { return cKeySTRINGTerminalRuleCall_1_0; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFalseKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTrueKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'false' | 'true'
		@Override public ParserRule getRule() { return rule; }

		//'false' | 'true'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'false'
		public Keyword getFalseKeyword_0() { return cFalseKeyword_0; }

		//'true'
		public Keyword getTrueKeyword_1() { return cTrueKeyword_1; }
	}

	public class ElongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.Elong");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Elong ecore::ELong:
		//	INT
		@Override public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cImageKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cImageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cImageImageCrossReference_4_0 = (CrossReference)cImageAssignment_4.eContents().get(0);
		private final RuleCall cImageImageIDTerminalRuleCall_4_0_1 = (RuleCall)cImageImageCrossReference_4_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cBindsKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cBindsAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cBindsBindParserRuleCall_5_0_2_0 = (RuleCall)cBindsAssignment_5_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_0_3 = (Keyword)cGroup_5_0.eContents().get(3);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cCapabilityAddKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cCapabilityAddAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cCapabilityAddCapabilityEnumRuleCall_5_1_2_0 = (RuleCall)cCapabilityAddAssignment_5_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_1_3 = (Keyword)cGroup_5_1.eContents().get(3);
		private final Group cGroup_5_2 = (Group)cUnorderedGroup_5.eContents().get(2);
		private final Keyword cCapabilityDropKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_2_1 = (Keyword)cGroup_5_2.eContents().get(1);
		private final Assignment cCapabilityDropAssignment_5_2_2 = (Assignment)cGroup_5_2.eContents().get(2);
		private final RuleCall cCapabilityDropCapabilityEnumRuleCall_5_2_2_0 = (RuleCall)cCapabilityDropAssignment_5_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2_3 = (Keyword)cGroup_5_2.eContents().get(3);
		private final Group cGroup_5_3 = (Group)cUnorderedGroup_5.eContents().get(3);
		private final Keyword cCommandsKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_3_1 = (Keyword)cGroup_5_3.eContents().get(1);
		private final Assignment cCommandsAssignment_5_3_2 = (Assignment)cGroup_5_3.eContents().get(2);
		private final RuleCall cCommandsSTRINGTerminalRuleCall_5_3_2_0 = (RuleCall)cCommandsAssignment_5_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3_3 = (Keyword)cGroup_5_3.eContents().get(3);
		private final Group cGroup_5_4 = (Group)cUnorderedGroup_5.eContents().get(4);
		private final Keyword cContainerIDFileKeyword_5_4_0 = (Keyword)cGroup_5_4.eContents().get(0);
		private final Assignment cContainerIDFileAssignment_5_4_1 = (Assignment)cGroup_5_4.eContents().get(1);
		private final RuleCall cContainerIDFileSTRINGTerminalRuleCall_5_4_1_0 = (RuleCall)cContainerIDFileAssignment_5_4_1.eContents().get(0);
		private final Group cGroup_5_5 = (Group)cUnorderedGroup_5.eContents().get(5);
		private final Keyword cCpuPeriodKeyword_5_5_0 = (Keyword)cGroup_5_5.eContents().get(0);
		private final Assignment cCpuPeriodAssignment_5_5_1 = (Assignment)cGroup_5_5.eContents().get(1);
		private final RuleCall cCpuPeriodINTTerminalRuleCall_5_5_1_0 = (RuleCall)cCpuPeriodAssignment_5_5_1.eContents().get(0);
		private final Group cGroup_5_6 = (Group)cUnorderedGroup_5.eContents().get(6);
		private final Keyword cCpusetCpusKeyword_5_6_0 = (Keyword)cGroup_5_6.eContents().get(0);
		private final Assignment cCpusetCpusAssignment_5_6_1 = (Assignment)cGroup_5_6.eContents().get(1);
		private final RuleCall cCpusetCpusINTTerminalRuleCall_5_6_1_0 = (RuleCall)cCpusetCpusAssignment_5_6_1.eContents().get(0);
		private final Group cGroup_5_7 = (Group)cUnorderedGroup_5.eContents().get(7);
		private final Keyword cCpusetMemsKeyword_5_7_0 = (Keyword)cGroup_5_7.eContents().get(0);
		private final Assignment cCpusetMemsAssignment_5_7_1 = (Assignment)cGroup_5_7.eContents().get(1);
		private final RuleCall cCpusetMemsSTRINGTerminalRuleCall_5_7_1_0 = (RuleCall)cCpusetMemsAssignment_5_7_1.eContents().get(0);
		private final Group cGroup_5_8 = (Group)cUnorderedGroup_5.eContents().get(8);
		private final Keyword cCpuSharesKeyword_5_8_0 = (Keyword)cGroup_5_8.eContents().get(0);
		private final Assignment cCpuSharesAssignment_5_8_1 = (Assignment)cGroup_5_8.eContents().get(1);
		private final RuleCall cCpuSharesINTTerminalRuleCall_5_8_1_0 = (RuleCall)cCpuSharesAssignment_5_8_1.eContents().get(0);
		private final Group cGroup_5_9 = (Group)cUnorderedGroup_5.eContents().get(9);
		private final Keyword cDevicesKeyword_5_9_0 = (Keyword)cGroup_5_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_9_1 = (Keyword)cGroup_5_9.eContents().get(1);
		private final Assignment cDevicesAssignment_5_9_2 = (Assignment)cGroup_5_9.eContents().get(2);
		private final RuleCall cDevicesDeviceParserRuleCall_5_9_2_0 = (RuleCall)cDevicesAssignment_5_9_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_9_3 = (Keyword)cGroup_5_9.eContents().get(3);
		private final Group cGroup_5_10 = (Group)cUnorderedGroup_5.eContents().get(10);
		private final Keyword cDnsKeyword_5_10_0 = (Keyword)cGroup_5_10.eContents().get(0);
		private final Assignment cDnsAssignment_5_10_1 = (Assignment)cGroup_5_10.eContents().get(1);
		private final RuleCall cDnsSTRINGTerminalRuleCall_5_10_1_0 = (RuleCall)cDnsAssignment_5_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_10_2 = (Keyword)cGroup_5_10.eContents().get(2);
		private final Group cGroup_5_11 = (Group)cUnorderedGroup_5.eContents().get(11);
		private final Keyword cDnsSearchKeyword_5_11_0 = (Keyword)cGroup_5_11.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_11_1 = (Keyword)cGroup_5_11.eContents().get(1);
		private final Assignment cDnsSearchAssignment_5_11_2 = (Assignment)cGroup_5_11.eContents().get(2);
		private final RuleCall cDnsSearchSTRINGTerminalRuleCall_5_11_2_0 = (RuleCall)cDnsSearchAssignment_5_11_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_11_3 = (Keyword)cGroup_5_11.eContents().get(3);
		private final Group cGroup_5_12 = (Group)cUnorderedGroup_5.eContents().get(12);
		private final Keyword cDomainNameKeyword_5_12_0 = (Keyword)cGroup_5_12.eContents().get(0);
		private final Assignment cDomainNameAssignment_5_12_1 = (Assignment)cGroup_5_12.eContents().get(1);
		private final RuleCall cDomainNameSTRINGTerminalRuleCall_5_12_1_0 = (RuleCall)cDomainNameAssignment_5_12_1.eContents().get(0);
		private final Group cGroup_5_13 = (Group)cUnorderedGroup_5.eContents().get(13);
		private final Keyword cEntrypointKeyword_5_13_0 = (Keyword)cGroup_5_13.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_13_1 = (Keyword)cGroup_5_13.eContents().get(1);
		private final Assignment cEntrypointAssignment_5_13_2 = (Assignment)cGroup_5_13.eContents().get(2);
		private final RuleCall cEntrypointSTRINGTerminalRuleCall_5_13_2_0 = (RuleCall)cEntrypointAssignment_5_13_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_13_3 = (Keyword)cGroup_5_13.eContents().get(3);
		private final Group cGroup_5_14 = (Group)cUnorderedGroup_5.eContents().get(14);
		private final Keyword cEnvKeyword_5_14_0 = (Keyword)cGroup_5_14.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_14_1 = (Keyword)cGroup_5_14.eContents().get(1);
		private final Assignment cEnvAssignment_5_14_2 = (Assignment)cGroup_5_14.eContents().get(2);
		private final RuleCall cEnvSTRINGTerminalRuleCall_5_14_2_0 = (RuleCall)cEnvAssignment_5_14_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_14_3 = (Keyword)cGroup_5_14.eContents().get(3);
		private final Group cGroup_5_15 = (Group)cUnorderedGroup_5.eContents().get(15);
		private final Keyword cExposedPortsKeyword_5_15_0 = (Keyword)cGroup_5_15.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_15_1 = (Keyword)cGroup_5_15.eContents().get(1);
		private final Assignment cExposedPortsAssignment_5_15_2 = (Assignment)cGroup_5_15.eContents().get(2);
		private final RuleCall cExposedPortsExposedPortParserRuleCall_5_15_2_0 = (RuleCall)cExposedPortsAssignment_5_15_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_15_3 = (Keyword)cGroup_5_15.eContents().get(3);
		private final Group cGroup_5_16 = (Group)cUnorderedGroup_5.eContents().get(16);
		private final Keyword cExtraHostsKeyword_5_16_0 = (Keyword)cGroup_5_16.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_16_1 = (Keyword)cGroup_5_16.eContents().get(1);
		private final Assignment cExtraHostsAssignment_5_16_2 = (Assignment)cGroup_5_16.eContents().get(2);
		private final RuleCall cExtraHostsSTRINGTerminalRuleCall_5_16_2_0 = (RuleCall)cExtraHostsAssignment_5_16_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_16_3 = (Keyword)cGroup_5_16.eContents().get(3);
		private final Group cGroup_5_17 = (Group)cUnorderedGroup_5.eContents().get(17);
		private final Keyword cLabelsKeyword_5_17_0 = (Keyword)cGroup_5_17.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_17_1 = (Keyword)cGroup_5_17.eContents().get(1);
		private final Assignment cLabelsAssignment_5_17_2 = (Assignment)cGroup_5_17.eContents().get(2);
		private final RuleCall cLabelsLabelParserRuleCall_5_17_2_0 = (RuleCall)cLabelsAssignment_5_17_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_17_3 = (Keyword)cGroup_5_17.eContents().get(3);
		private final Group cGroup_5_18 = (Group)cUnorderedGroup_5.eContents().get(18);
		private final Keyword cLinksKeyword_5_18_0 = (Keyword)cGroup_5_18.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_18_1 = (Keyword)cGroup_5_18.eContents().get(1);
		private final Assignment cLinksAssignment_5_18_2 = (Assignment)cGroup_5_18.eContents().get(2);
		private final RuleCall cLinksLinkParserRuleCall_5_18_2_0 = (RuleCall)cLinksAssignment_5_18_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_18_3 = (Keyword)cGroup_5_18.eContents().get(3);
		private final Group cGroup_5_19 = (Group)cUnorderedGroup_5.eContents().get(19);
		private final Keyword cMacAddressKeyword_5_19_0 = (Keyword)cGroup_5_19.eContents().get(0);
		private final Assignment cMacAddressAssignment_5_19_1 = (Assignment)cGroup_5_19.eContents().get(1);
		private final RuleCall cMacAddressSTRINGTerminalRuleCall_5_19_1_0 = (RuleCall)cMacAddressAssignment_5_19_1.eContents().get(0);
		private final Group cGroup_5_20 = (Group)cUnorderedGroup_5.eContents().get(20);
		private final Keyword cMemoryKeyword_5_20_0 = (Keyword)cGroup_5_20.eContents().get(0);
		private final Assignment cMemoryAssignment_5_20_1 = (Assignment)cGroup_5_20.eContents().get(1);
		private final RuleCall cMemoryElongParserRuleCall_5_20_1_0 = (RuleCall)cMemoryAssignment_5_20_1.eContents().get(0);
		private final Group cGroup_5_21 = (Group)cUnorderedGroup_5.eContents().get(21);
		private final Keyword cMemorySwapKeyword_5_21_0 = (Keyword)cGroup_5_21.eContents().get(0);
		private final Assignment cMemorySwapAssignment_5_21_1 = (Assignment)cGroup_5_21.eContents().get(1);
		private final RuleCall cMemorySwapElongParserRuleCall_5_21_1_0 = (RuleCall)cMemorySwapAssignment_5_21_1.eContents().get(0);
		private final Group cGroup_5_22 = (Group)cUnorderedGroup_5.eContents().get(22);
		private final Keyword cDisableNetworkKeyword_5_22_0 = (Keyword)cGroup_5_22.eContents().get(0);
		private final Assignment cDisableNetworkAssignment_5_22_1 = (Assignment)cGroup_5_22.eContents().get(1);
		private final RuleCall cDisableNetworkEBooleanParserRuleCall_5_22_1_0 = (RuleCall)cDisableNetworkAssignment_5_22_1.eContents().get(0);
		private final Group cGroup_5_23 = (Group)cUnorderedGroup_5.eContents().get(23);
		private final Keyword cNetworkModeKeyword_5_23_0 = (Keyword)cGroup_5_23.eContents().get(0);
		private final Assignment cNetworkModeAssignment_5_23_1 = (Assignment)cGroup_5_23.eContents().get(1);
		private final RuleCall cNetworkModeSTRINGTerminalRuleCall_5_23_1_0 = (RuleCall)cNetworkModeAssignment_5_23_1.eContents().get(0);
		private final Group cGroup_5_24 = (Group)cUnorderedGroup_5.eContents().get(24);
		private final Keyword cPortBindingsKeyword_5_24_0 = (Keyword)cGroup_5_24.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_24_1 = (Keyword)cGroup_5_24.eContents().get(1);
		private final Assignment cPortBindingsAssignment_5_24_2 = (Assignment)cGroup_5_24.eContents().get(2);
		private final RuleCall cPortBindingsPortBindingParserRuleCall_5_24_2_0 = (RuleCall)cPortBindingsAssignment_5_24_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_24_3 = (Keyword)cGroup_5_24.eContents().get(3);
		private final Group cGroup_5_25 = (Group)cUnorderedGroup_5.eContents().get(25);
		private final Keyword cPrivilegedKeyword_5_25_0 = (Keyword)cGroup_5_25.eContents().get(0);
		private final Assignment cPrivilegedAssignment_5_25_1 = (Assignment)cGroup_5_25.eContents().get(1);
		private final RuleCall cPrivilegedEBooleanParserRuleCall_5_25_1_0 = (RuleCall)cPrivilegedAssignment_5_25_1.eContents().get(0);
		private final Group cGroup_5_26 = (Group)cUnorderedGroup_5.eContents().get(26);
		private final Keyword cPublishAllPortsKeyword_5_26_0 = (Keyword)cGroup_5_26.eContents().get(0);
		private final Assignment cPublishAllPortsAssignment_5_26_1 = (Assignment)cGroup_5_26.eContents().get(1);
		private final RuleCall cPublishAllPortsEBooleanParserRuleCall_5_26_1_0 = (RuleCall)cPublishAllPortsAssignment_5_26_1.eContents().get(0);
		private final Group cGroup_5_27 = (Group)cUnorderedGroup_5.eContents().get(27);
		private final Keyword cReadonlyRootfsKeyword_5_27_0 = (Keyword)cGroup_5_27.eContents().get(0);
		private final Assignment cReadonlyRootfsAssignment_5_27_1 = (Assignment)cGroup_5_27.eContents().get(1);
		private final RuleCall cReadonlyRootfsEBooleanParserRuleCall_5_27_1_0 = (RuleCall)cReadonlyRootfsAssignment_5_27_1.eContents().get(0);
		private final Group cGroup_5_28 = (Group)cUnorderedGroup_5.eContents().get(28);
		private final Keyword cPidModeKeyword_5_28_0 = (Keyword)cGroup_5_28.eContents().get(0);
		private final Assignment cPidModeAssignment_5_28_1 = (Assignment)cGroup_5_28.eContents().get(1);
		private final RuleCall cPidModeSTRINGTerminalRuleCall_5_28_1_0 = (RuleCall)cPidModeAssignment_5_28_1.eContents().get(0);
		private final Group cGroup_5_29 = (Group)cUnorderedGroup_5.eContents().get(29);
		private final Keyword cCgroupParentKeyword_5_29_0 = (Keyword)cGroup_5_29.eContents().get(0);
		private final Assignment cCgroupParentAssignment_5_29_1 = (Assignment)cGroup_5_29.eContents().get(1);
		private final RuleCall cCgroupParentSTRINGTerminalRuleCall_5_29_1_0 = (RuleCall)cCgroupParentAssignment_5_29_1.eContents().get(0);
		private final Group cGroup_5_30 = (Group)cUnorderedGroup_5.eContents().get(30);
		private final Keyword cWorkingDirKeyword_5_30_0 = (Keyword)cGroup_5_30.eContents().get(0);
		private final Assignment cWorkingDirAssignment_5_30_1 = (Assignment)cGroup_5_30.eContents().get(1);
		private final RuleCall cWorkingDirSTRINGTerminalRuleCall_5_30_1_0 = (RuleCall)cWorkingDirAssignment_5_30_1.eContents().get(0);
		private final Group cGroup_5_31 = (Group)cUnorderedGroup_5.eContents().get(31);
		private final Keyword cUserKeyword_5_31_0 = (Keyword)cGroup_5_31.eContents().get(0);
		private final Assignment cUserAssignment_5_31_1 = (Assignment)cGroup_5_31.eContents().get(1);
		private final RuleCall cUserSTRINGTerminalRuleCall_5_31_1_0 = (RuleCall)cUserAssignment_5_31_1.eContents().get(0);
		private final Group cGroup_5_32 = (Group)cUnorderedGroup_5.eContents().get(32);
		private final Keyword cTtyKeyword_5_32_0 = (Keyword)cGroup_5_32.eContents().get(0);
		private final Assignment cTtyAssignment_5_32_1 = (Assignment)cGroup_5_32.eContents().get(1);
		private final RuleCall cTtyEBooleanParserRuleCall_5_32_1_0 = (RuleCall)cTtyAssignment_5_32_1.eContents().get(0);
		private final Group cGroup_5_33 = (Group)cUnorderedGroup_5.eContents().get(33);
		private final Keyword cRestartPolicyKeyword_5_33_0 = (Keyword)cGroup_5_33.eContents().get(0);
		private final Assignment cRestartPolicyAssignment_5_33_1 = (Assignment)cGroup_5_33.eContents().get(1);
		private final RuleCall cRestartPolicyRestartPolicyParserRuleCall_5_33_1_0 = (RuleCall)cRestartPolicyAssignment_5_33_1.eContents().get(0);
		private final Group cGroup_5_34 = (Group)cUnorderedGroup_5.eContents().get(34);
		private final Keyword cVolumesKeyword_5_34_0 = (Keyword)cGroup_5_34.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_34_1 = (Keyword)cGroup_5_34.eContents().get(1);
		private final Group cGroup_5_34_2 = (Group)cGroup_5_34.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_5_34_2_0 = (Keyword)cGroup_5_34_2.eContents().get(0);
		private final Assignment cVolumesAssignment_5_34_2_1 = (Assignment)cGroup_5_34_2.eContents().get(1);
		private final RuleCall cVolumesVolumeParserRuleCall_5_34_2_1_0 = (RuleCall)cVolumesAssignment_5_34_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_34_3 = (Keyword)cGroup_5_34.eContents().get(3);
		private final Group cGroup_5_35 = (Group)cUnorderedGroup_5.eContents().get(35);
		private final Keyword cVolumesFromKeyword_5_35_0 = (Keyword)cGroup_5_35.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_35_1 = (Keyword)cGroup_5_35.eContents().get(1);
		private final Group cGroup_5_35_2 = (Group)cGroup_5_35.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_5_35_2_0 = (Keyword)cGroup_5_35_2.eContents().get(0);
		private final Assignment cVolumesFromAssignment_5_35_2_1 = (Assignment)cGroup_5_35_2.eContents().get(1);
		private final RuleCall cVolumesFromVolumesFromParserRuleCall_5_35_2_1_0 = (RuleCall)cVolumesFromAssignment_5_35_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_35_3 = (Keyword)cGroup_5_35.eContents().get(3);
		private final Group cGroup_5_36 = (Group)cUnorderedGroup_5.eContents().get(36);
		private final Keyword cUlimitsKeyword_5_36_0 = (Keyword)cGroup_5_36.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_36_1 = (Keyword)cGroup_5_36.eContents().get(1);
		private final Group cGroup_5_36_2 = (Group)cGroup_5_36.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_5_36_2_0 = (Keyword)cGroup_5_36_2.eContents().get(0);
		private final Assignment cUlimitsAssignment_5_36_2_1 = (Assignment)cGroup_5_36_2.eContents().get(1);
		private final RuleCall cUlimitsUlimitParserRuleCall_5_36_2_1_0 = (RuleCall)cUlimitsAssignment_5_36_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_36_3 = (Keyword)cGroup_5_36.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////Network:
		// //	'network' name=ID '{'  '}'
		// //;
		// //
		// //Volume:
		// //	'volume'  name=ID '{'  '}'
		// //;
		// Container:
		//	'container' name=ID '{'
		//	'image' image=[Image] (('binds' '{' binds+=Bind+ '}')? & ('capabilityAdd' '{' capabilityAdd+=Capability+ '}')? &
		//	('capabilityDrop' '{' capabilityDrop+=Capability+ '}')? & ('commands' '{' commands+=STRING+ '}')? &
		//	('containerIDFile' containerIDFile=STRING)? & ('cpuPeriod' cpuPeriod=INT)? & ('cpusetCpus' cpusetCpus=INT)? &
		//	('cpusetMems' cpusetMems=STRING)? & ('cpuShares' cpuShares=INT)? & ('devices' '{' devices+=Device+ '}')? & ('dns'
		//	dns+=STRING+ '}')? & ('dnsSearch' '{' dnsSearch+=STRING+ '}')? & ('domainName' domainName=STRING)? & ('entrypoint'
		//	'{' entrypoint+=STRING+ '}')? & ('env' '{' env+=STRING+ '}')? & ('exposedPorts' '{' exposedPorts+=ExposedPort+ '}')?
		//	& ('extraHosts' '{' extraHosts+=STRING+ '}')? & ('labels' '{' labels+=Label+ '}')? & ('links' '{' links+=Link+ '}')?
		//	& ('macAddress' macAddress=STRING)? & ('memory' memory=Elong)? & ('memorySwap' memorySwap=Elong)? & ('disableNetwork'
		//	disableNetwork=EBoolean)? & ('networkMode' networkMode=STRING)? & ('portBindings' '{' portBindings+=PortBinding+
		//	'}')? & ('privileged' privileged=EBoolean)? & ('publishAllPorts' publishAllPorts=EBoolean)? & ('readonlyRootfs'
		//	readonlyRootfs=EBoolean)? & ('pidMode' pidMode=STRING)? & ('cgroupParent' cgroupParent=STRING)? & ('workingDir'
		//	workingDir=STRING)? & ('user' user=STRING)? & ('tty' tty=EBoolean)? & ('restartPolicy' restartPolicy=RestartPolicy)?
		//	& ('volumes' '{' ('-' volumes+=Volume)+ '}')? & ('volumesFrom' '{' ('-' volumesFrom+=VolumesFrom)+ '}')? & ('ulimits'
		//	'{' ('-' ulimits+=Ulimit)+ '}')?)
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'container' name=ID '{' 'image' image=[Image] (('binds' '{' binds+=Bind+ '}')? & ('capabilityAdd' '{'
		//capabilityAdd+=Capability+ '}')? & ('capabilityDrop' '{' capabilityDrop+=Capability+ '}')? & ('commands' '{'
		//commands+=STRING+ '}')? & ('containerIDFile' containerIDFile=STRING)? & ('cpuPeriod' cpuPeriod=INT)? & ('cpusetCpus'
		//cpusetCpus=INT)? & ('cpusetMems' cpusetMems=STRING)? & ('cpuShares' cpuShares=INT)? & ('devices' '{' devices+=Device+
		//'}')? & ('dns' dns+=STRING+ '}')? & ('dnsSearch' '{' dnsSearch+=STRING+ '}')? & ('domainName' domainName=STRING)? &
		//('entrypoint' '{' entrypoint+=STRING+ '}')? & ('env' '{' env+=STRING+ '}')? & ('exposedPorts' '{'
		//exposedPorts+=ExposedPort+ '}')? & ('extraHosts' '{' extraHosts+=STRING+ '}')? & ('labels' '{' labels+=Label+ '}')? &
		//('links' '{' links+=Link+ '}')? & ('macAddress' macAddress=STRING)? & ('memory' memory=Elong)? & ('memorySwap'
		//memorySwap=Elong)? & ('disableNetwork' disableNetwork=EBoolean)? & ('networkMode' networkMode=STRING)? &
		//('portBindings' '{' portBindings+=PortBinding+ '}')? & ('privileged' privileged=EBoolean)? & ('publishAllPorts'
		//publishAllPorts=EBoolean)? & ('readonlyRootfs' readonlyRootfs=EBoolean)? & ('pidMode' pidMode=STRING)? &
		//('cgroupParent' cgroupParent=STRING)? & ('workingDir' workingDir=STRING)? & ('user' user=STRING)? & ('tty'
		//tty=EBoolean)? & ('restartPolicy' restartPolicy=RestartPolicy)? & ('volumes' '{' ('-' volumes+=Volume)+ '}')? &
		//('volumesFrom' '{' ('-' volumesFrom+=VolumesFrom)+ '}')? & ('ulimits' '{' ('-' ulimits+=Ulimit)+ '}')?) '}'
		public Group getGroup() { return cGroup; }

		//'container'
		public Keyword getContainerKeyword_0() { return cContainerKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//'image'
		public Keyword getImageKeyword_3() { return cImageKeyword_3; }

		//image=[Image]
		public Assignment getImageAssignment_4() { return cImageAssignment_4; }

		//[Image]
		public CrossReference getImageImageCrossReference_4_0() { return cImageImageCrossReference_4_0; }

		//ID
		public RuleCall getImageImageIDTerminalRuleCall_4_0_1() { return cImageImageIDTerminalRuleCall_4_0_1; }

		//(('binds' '{' binds+=Bind+ '}')? & ('capabilityAdd' '{' capabilityAdd+=Capability+ '}')? & ('capabilityDrop' '{'
		//capabilityDrop+=Capability+ '}')? & ('commands' '{' commands+=STRING+ '}')? & ('containerIDFile'
		//containerIDFile=STRING)? & ('cpuPeriod' cpuPeriod=INT)? & ('cpusetCpus' cpusetCpus=INT)? & ('cpusetMems'
		//cpusetMems=STRING)? & ('cpuShares' cpuShares=INT)? & ('devices' '{' devices+=Device+ '}')? & ('dns' dns+=STRING+ '}')?
		//& ('dnsSearch' '{' dnsSearch+=STRING+ '}')? & ('domainName' domainName=STRING)? & ('entrypoint' '{'
		//entrypoint+=STRING+ '}')? & ('env' '{' env+=STRING+ '}')? & ('exposedPorts' '{' exposedPorts+=ExposedPort+ '}')? &
		//('extraHosts' '{' extraHosts+=STRING+ '}')? & ('labels' '{' labels+=Label+ '}')? & ('links' '{' links+=Link+ '}')? &
		//('macAddress' macAddress=STRING)? & ('memory' memory=Elong)? & ('memorySwap' memorySwap=Elong)? & ('disableNetwork'
		//disableNetwork=EBoolean)? & ('networkMode' networkMode=STRING)? & ('portBindings' '{' portBindings+=PortBinding+ '}')?
		//& ('privileged' privileged=EBoolean)? & ('publishAllPorts' publishAllPorts=EBoolean)? & ('readonlyRootfs'
		//readonlyRootfs=EBoolean)? & ('pidMode' pidMode=STRING)? & ('cgroupParent' cgroupParent=STRING)? & ('workingDir'
		//workingDir=STRING)? & ('user' user=STRING)? & ('tty' tty=EBoolean)? & ('restartPolicy' restartPolicy=RestartPolicy)? &
		//('volumes' '{' ('-' volumes+=Volume)+ '}')? & ('volumesFrom' '{' ('-' volumesFrom+=VolumesFrom)+ '}')? & ('ulimits'
		//'{' ('-' ulimits+=Ulimit)+ '}')?)
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//('binds' '{' binds+=Bind+ '}')?
		public Group getGroup_5_0() { return cGroup_5_0; }

		//'binds'
		public Keyword getBindsKeyword_5_0_0() { return cBindsKeyword_5_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0_1() { return cLeftCurlyBracketKeyword_5_0_1; }

		//binds+=Bind+
		public Assignment getBindsAssignment_5_0_2() { return cBindsAssignment_5_0_2; }

		//Bind
		public RuleCall getBindsBindParserRuleCall_5_0_2_0() { return cBindsBindParserRuleCall_5_0_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_0_3() { return cRightCurlyBracketKeyword_5_0_3; }

		//('capabilityAdd' '{' capabilityAdd+=Capability+ '}')?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//'capabilityAdd'
		public Keyword getCapabilityAddKeyword_5_1_0() { return cCapabilityAddKeyword_5_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1_1() { return cLeftCurlyBracketKeyword_5_1_1; }

		//capabilityAdd+=Capability+
		public Assignment getCapabilityAddAssignment_5_1_2() { return cCapabilityAddAssignment_5_1_2; }

		//Capability
		public RuleCall getCapabilityAddCapabilityEnumRuleCall_5_1_2_0() { return cCapabilityAddCapabilityEnumRuleCall_5_1_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_1_3() { return cRightCurlyBracketKeyword_5_1_3; }

		//('capabilityDrop' '{' capabilityDrop+=Capability+ '}')?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//'capabilityDrop'
		public Keyword getCapabilityDropKeyword_5_2_0() { return cCapabilityDropKeyword_5_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_2_1() { return cLeftCurlyBracketKeyword_5_2_1; }

		//capabilityDrop+=Capability+
		public Assignment getCapabilityDropAssignment_5_2_2() { return cCapabilityDropAssignment_5_2_2; }

		//Capability
		public RuleCall getCapabilityDropCapabilityEnumRuleCall_5_2_2_0() { return cCapabilityDropCapabilityEnumRuleCall_5_2_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_2_3() { return cRightCurlyBracketKeyword_5_2_3; }

		//('commands' '{' commands+=STRING+ '}')?
		public Group getGroup_5_3() { return cGroup_5_3; }

		//'commands'
		public Keyword getCommandsKeyword_5_3_0() { return cCommandsKeyword_5_3_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_3_1() { return cLeftCurlyBracketKeyword_5_3_1; }

		//commands+=STRING+
		public Assignment getCommandsAssignment_5_3_2() { return cCommandsAssignment_5_3_2; }

		//STRING
		public RuleCall getCommandsSTRINGTerminalRuleCall_5_3_2_0() { return cCommandsSTRINGTerminalRuleCall_5_3_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3_3() { return cRightCurlyBracketKeyword_5_3_3; }

		//('containerIDFile' containerIDFile=STRING)?
		public Group getGroup_5_4() { return cGroup_5_4; }

		//'containerIDFile'
		public Keyword getContainerIDFileKeyword_5_4_0() { return cContainerIDFileKeyword_5_4_0; }

		//containerIDFile=STRING
		public Assignment getContainerIDFileAssignment_5_4_1() { return cContainerIDFileAssignment_5_4_1; }

		//STRING
		public RuleCall getContainerIDFileSTRINGTerminalRuleCall_5_4_1_0() { return cContainerIDFileSTRINGTerminalRuleCall_5_4_1_0; }

		//('cpuPeriod' cpuPeriod=INT)?
		public Group getGroup_5_5() { return cGroup_5_5; }

		//'cpuPeriod'
		public Keyword getCpuPeriodKeyword_5_5_0() { return cCpuPeriodKeyword_5_5_0; }

		//cpuPeriod=INT
		public Assignment getCpuPeriodAssignment_5_5_1() { return cCpuPeriodAssignment_5_5_1; }

		//INT
		public RuleCall getCpuPeriodINTTerminalRuleCall_5_5_1_0() { return cCpuPeriodINTTerminalRuleCall_5_5_1_0; }

		//('cpusetCpus' cpusetCpus=INT)?
		public Group getGroup_5_6() { return cGroup_5_6; }

		//'cpusetCpus'
		public Keyword getCpusetCpusKeyword_5_6_0() { return cCpusetCpusKeyword_5_6_0; }

		//cpusetCpus=INT
		public Assignment getCpusetCpusAssignment_5_6_1() { return cCpusetCpusAssignment_5_6_1; }

		//INT
		public RuleCall getCpusetCpusINTTerminalRuleCall_5_6_1_0() { return cCpusetCpusINTTerminalRuleCall_5_6_1_0; }

		//('cpusetMems' cpusetMems=STRING)?
		public Group getGroup_5_7() { return cGroup_5_7; }

		//'cpusetMems'
		public Keyword getCpusetMemsKeyword_5_7_0() { return cCpusetMemsKeyword_5_7_0; }

		//cpusetMems=STRING
		public Assignment getCpusetMemsAssignment_5_7_1() { return cCpusetMemsAssignment_5_7_1; }

		//STRING
		public RuleCall getCpusetMemsSTRINGTerminalRuleCall_5_7_1_0() { return cCpusetMemsSTRINGTerminalRuleCall_5_7_1_0; }

		//('cpuShares' cpuShares=INT)?
		public Group getGroup_5_8() { return cGroup_5_8; }

		//'cpuShares'
		public Keyword getCpuSharesKeyword_5_8_0() { return cCpuSharesKeyword_5_8_0; }

		//cpuShares=INT
		public Assignment getCpuSharesAssignment_5_8_1() { return cCpuSharesAssignment_5_8_1; }

		//INT
		public RuleCall getCpuSharesINTTerminalRuleCall_5_8_1_0() { return cCpuSharesINTTerminalRuleCall_5_8_1_0; }

		//('devices' '{' devices+=Device+ '}')?
		public Group getGroup_5_9() { return cGroup_5_9; }

		//'devices'
		public Keyword getDevicesKeyword_5_9_0() { return cDevicesKeyword_5_9_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_9_1() { return cLeftCurlyBracketKeyword_5_9_1; }

		//devices+=Device+
		public Assignment getDevicesAssignment_5_9_2() { return cDevicesAssignment_5_9_2; }

		//Device
		public RuleCall getDevicesDeviceParserRuleCall_5_9_2_0() { return cDevicesDeviceParserRuleCall_5_9_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_9_3() { return cRightCurlyBracketKeyword_5_9_3; }

		//('dns' dns+=STRING+ '}')?
		public Group getGroup_5_10() { return cGroup_5_10; }

		//'dns'
		public Keyword getDnsKeyword_5_10_0() { return cDnsKeyword_5_10_0; }

		//dns+=STRING+
		public Assignment getDnsAssignment_5_10_1() { return cDnsAssignment_5_10_1; }

		//STRING
		public RuleCall getDnsSTRINGTerminalRuleCall_5_10_1_0() { return cDnsSTRINGTerminalRuleCall_5_10_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_10_2() { return cRightCurlyBracketKeyword_5_10_2; }

		//('dnsSearch' '{' dnsSearch+=STRING+ '}')?
		public Group getGroup_5_11() { return cGroup_5_11; }

		//'dnsSearch'
		public Keyword getDnsSearchKeyword_5_11_0() { return cDnsSearchKeyword_5_11_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_11_1() { return cLeftCurlyBracketKeyword_5_11_1; }

		//dnsSearch+=STRING+
		public Assignment getDnsSearchAssignment_5_11_2() { return cDnsSearchAssignment_5_11_2; }

		//STRING
		public RuleCall getDnsSearchSTRINGTerminalRuleCall_5_11_2_0() { return cDnsSearchSTRINGTerminalRuleCall_5_11_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_11_3() { return cRightCurlyBracketKeyword_5_11_3; }

		//('domainName' domainName=STRING)?
		public Group getGroup_5_12() { return cGroup_5_12; }

		//'domainName'
		public Keyword getDomainNameKeyword_5_12_0() { return cDomainNameKeyword_5_12_0; }

		//domainName=STRING
		public Assignment getDomainNameAssignment_5_12_1() { return cDomainNameAssignment_5_12_1; }

		//STRING
		public RuleCall getDomainNameSTRINGTerminalRuleCall_5_12_1_0() { return cDomainNameSTRINGTerminalRuleCall_5_12_1_0; }

		//('entrypoint' '{' entrypoint+=STRING+ '}')?
		public Group getGroup_5_13() { return cGroup_5_13; }

		//'entrypoint'
		public Keyword getEntrypointKeyword_5_13_0() { return cEntrypointKeyword_5_13_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_13_1() { return cLeftCurlyBracketKeyword_5_13_1; }

		//entrypoint+=STRING+
		public Assignment getEntrypointAssignment_5_13_2() { return cEntrypointAssignment_5_13_2; }

		//STRING
		public RuleCall getEntrypointSTRINGTerminalRuleCall_5_13_2_0() { return cEntrypointSTRINGTerminalRuleCall_5_13_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_13_3() { return cRightCurlyBracketKeyword_5_13_3; }

		//('env' '{' env+=STRING+ '}')?
		public Group getGroup_5_14() { return cGroup_5_14; }

		//'env'
		public Keyword getEnvKeyword_5_14_0() { return cEnvKeyword_5_14_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_14_1() { return cLeftCurlyBracketKeyword_5_14_1; }

		//env+=STRING+
		public Assignment getEnvAssignment_5_14_2() { return cEnvAssignment_5_14_2; }

		//STRING
		public RuleCall getEnvSTRINGTerminalRuleCall_5_14_2_0() { return cEnvSTRINGTerminalRuleCall_5_14_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_14_3() { return cRightCurlyBracketKeyword_5_14_3; }

		//('exposedPorts' '{' exposedPorts+=ExposedPort+ '}')?
		public Group getGroup_5_15() { return cGroup_5_15; }

		//'exposedPorts'
		public Keyword getExposedPortsKeyword_5_15_0() { return cExposedPortsKeyword_5_15_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_15_1() { return cLeftCurlyBracketKeyword_5_15_1; }

		//exposedPorts+=ExposedPort+
		public Assignment getExposedPortsAssignment_5_15_2() { return cExposedPortsAssignment_5_15_2; }

		//ExposedPort
		public RuleCall getExposedPortsExposedPortParserRuleCall_5_15_2_0() { return cExposedPortsExposedPortParserRuleCall_5_15_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_15_3() { return cRightCurlyBracketKeyword_5_15_3; }

		//('extraHosts' '{' extraHosts+=STRING+ '}')?
		public Group getGroup_5_16() { return cGroup_5_16; }

		//'extraHosts'
		public Keyword getExtraHostsKeyword_5_16_0() { return cExtraHostsKeyword_5_16_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_16_1() { return cLeftCurlyBracketKeyword_5_16_1; }

		//extraHosts+=STRING+
		public Assignment getExtraHostsAssignment_5_16_2() { return cExtraHostsAssignment_5_16_2; }

		//STRING
		public RuleCall getExtraHostsSTRINGTerminalRuleCall_5_16_2_0() { return cExtraHostsSTRINGTerminalRuleCall_5_16_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_16_3() { return cRightCurlyBracketKeyword_5_16_3; }

		//('labels' '{' labels+=Label+ '}')?
		public Group getGroup_5_17() { return cGroup_5_17; }

		//'labels'
		public Keyword getLabelsKeyword_5_17_0() { return cLabelsKeyword_5_17_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_17_1() { return cLeftCurlyBracketKeyword_5_17_1; }

		//labels+=Label+
		public Assignment getLabelsAssignment_5_17_2() { return cLabelsAssignment_5_17_2; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_5_17_2_0() { return cLabelsLabelParserRuleCall_5_17_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_17_3() { return cRightCurlyBracketKeyword_5_17_3; }

		//('links' '{' links+=Link+ '}')?
		public Group getGroup_5_18() { return cGroup_5_18; }

		//'links'
		public Keyword getLinksKeyword_5_18_0() { return cLinksKeyword_5_18_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_18_1() { return cLeftCurlyBracketKeyword_5_18_1; }

		//links+=Link+
		public Assignment getLinksAssignment_5_18_2() { return cLinksAssignment_5_18_2; }

		//Link
		public RuleCall getLinksLinkParserRuleCall_5_18_2_0() { return cLinksLinkParserRuleCall_5_18_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_18_3() { return cRightCurlyBracketKeyword_5_18_3; }

		//('macAddress' macAddress=STRING)?
		public Group getGroup_5_19() { return cGroup_5_19; }

		//'macAddress'
		public Keyword getMacAddressKeyword_5_19_0() { return cMacAddressKeyword_5_19_0; }

		//macAddress=STRING
		public Assignment getMacAddressAssignment_5_19_1() { return cMacAddressAssignment_5_19_1; }

		//STRING
		public RuleCall getMacAddressSTRINGTerminalRuleCall_5_19_1_0() { return cMacAddressSTRINGTerminalRuleCall_5_19_1_0; }

		//('memory' memory=Elong)?
		public Group getGroup_5_20() { return cGroup_5_20; }

		//'memory'
		public Keyword getMemoryKeyword_5_20_0() { return cMemoryKeyword_5_20_0; }

		//memory=Elong
		public Assignment getMemoryAssignment_5_20_1() { return cMemoryAssignment_5_20_1; }

		//Elong
		public RuleCall getMemoryElongParserRuleCall_5_20_1_0() { return cMemoryElongParserRuleCall_5_20_1_0; }

		//('memorySwap' memorySwap=Elong)?
		public Group getGroup_5_21() { return cGroup_5_21; }

		//'memorySwap'
		public Keyword getMemorySwapKeyword_5_21_0() { return cMemorySwapKeyword_5_21_0; }

		//memorySwap=Elong
		public Assignment getMemorySwapAssignment_5_21_1() { return cMemorySwapAssignment_5_21_1; }

		//Elong
		public RuleCall getMemorySwapElongParserRuleCall_5_21_1_0() { return cMemorySwapElongParserRuleCall_5_21_1_0; }

		//('disableNetwork' disableNetwork=EBoolean)?
		public Group getGroup_5_22() { return cGroup_5_22; }

		//'disableNetwork'
		public Keyword getDisableNetworkKeyword_5_22_0() { return cDisableNetworkKeyword_5_22_0; }

		//disableNetwork=EBoolean
		public Assignment getDisableNetworkAssignment_5_22_1() { return cDisableNetworkAssignment_5_22_1; }

		//EBoolean
		public RuleCall getDisableNetworkEBooleanParserRuleCall_5_22_1_0() { return cDisableNetworkEBooleanParserRuleCall_5_22_1_0; }

		//('networkMode' networkMode=STRING)?
		public Group getGroup_5_23() { return cGroup_5_23; }

		//'networkMode'
		public Keyword getNetworkModeKeyword_5_23_0() { return cNetworkModeKeyword_5_23_0; }

		//networkMode=STRING
		public Assignment getNetworkModeAssignment_5_23_1() { return cNetworkModeAssignment_5_23_1; }

		//STRING
		public RuleCall getNetworkModeSTRINGTerminalRuleCall_5_23_1_0() { return cNetworkModeSTRINGTerminalRuleCall_5_23_1_0; }

		//('portBindings' '{' portBindings+=PortBinding+ '}')?
		public Group getGroup_5_24() { return cGroup_5_24; }

		//'portBindings'
		public Keyword getPortBindingsKeyword_5_24_0() { return cPortBindingsKeyword_5_24_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_24_1() { return cLeftCurlyBracketKeyword_5_24_1; }

		//portBindings+=PortBinding+
		public Assignment getPortBindingsAssignment_5_24_2() { return cPortBindingsAssignment_5_24_2; }

		//PortBinding
		public RuleCall getPortBindingsPortBindingParserRuleCall_5_24_2_0() { return cPortBindingsPortBindingParserRuleCall_5_24_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_24_3() { return cRightCurlyBracketKeyword_5_24_3; }

		//('privileged' privileged=EBoolean)?
		public Group getGroup_5_25() { return cGroup_5_25; }

		//'privileged'
		public Keyword getPrivilegedKeyword_5_25_0() { return cPrivilegedKeyword_5_25_0; }

		//privileged=EBoolean
		public Assignment getPrivilegedAssignment_5_25_1() { return cPrivilegedAssignment_5_25_1; }

		//EBoolean
		public RuleCall getPrivilegedEBooleanParserRuleCall_5_25_1_0() { return cPrivilegedEBooleanParserRuleCall_5_25_1_0; }

		//('publishAllPorts' publishAllPorts=EBoolean)?
		public Group getGroup_5_26() { return cGroup_5_26; }

		//'publishAllPorts'
		public Keyword getPublishAllPortsKeyword_5_26_0() { return cPublishAllPortsKeyword_5_26_0; }

		//publishAllPorts=EBoolean
		public Assignment getPublishAllPortsAssignment_5_26_1() { return cPublishAllPortsAssignment_5_26_1; }

		//EBoolean
		public RuleCall getPublishAllPortsEBooleanParserRuleCall_5_26_1_0() { return cPublishAllPortsEBooleanParserRuleCall_5_26_1_0; }

		//('readonlyRootfs' readonlyRootfs=EBoolean)?
		public Group getGroup_5_27() { return cGroup_5_27; }

		//'readonlyRootfs'
		public Keyword getReadonlyRootfsKeyword_5_27_0() { return cReadonlyRootfsKeyword_5_27_0; }

		//readonlyRootfs=EBoolean
		public Assignment getReadonlyRootfsAssignment_5_27_1() { return cReadonlyRootfsAssignment_5_27_1; }

		//EBoolean
		public RuleCall getReadonlyRootfsEBooleanParserRuleCall_5_27_1_0() { return cReadonlyRootfsEBooleanParserRuleCall_5_27_1_0; }

		//('pidMode' pidMode=STRING)?
		public Group getGroup_5_28() { return cGroup_5_28; }

		//'pidMode'
		public Keyword getPidModeKeyword_5_28_0() { return cPidModeKeyword_5_28_0; }

		//pidMode=STRING
		public Assignment getPidModeAssignment_5_28_1() { return cPidModeAssignment_5_28_1; }

		//STRING
		public RuleCall getPidModeSTRINGTerminalRuleCall_5_28_1_0() { return cPidModeSTRINGTerminalRuleCall_5_28_1_0; }

		//('cgroupParent' cgroupParent=STRING)?
		public Group getGroup_5_29() { return cGroup_5_29; }

		//'cgroupParent'
		public Keyword getCgroupParentKeyword_5_29_0() { return cCgroupParentKeyword_5_29_0; }

		//cgroupParent=STRING
		public Assignment getCgroupParentAssignment_5_29_1() { return cCgroupParentAssignment_5_29_1; }

		//STRING
		public RuleCall getCgroupParentSTRINGTerminalRuleCall_5_29_1_0() { return cCgroupParentSTRINGTerminalRuleCall_5_29_1_0; }

		//('workingDir' workingDir=STRING)?
		public Group getGroup_5_30() { return cGroup_5_30; }

		//'workingDir'
		public Keyword getWorkingDirKeyword_5_30_0() { return cWorkingDirKeyword_5_30_0; }

		//workingDir=STRING
		public Assignment getWorkingDirAssignment_5_30_1() { return cWorkingDirAssignment_5_30_1; }

		//STRING
		public RuleCall getWorkingDirSTRINGTerminalRuleCall_5_30_1_0() { return cWorkingDirSTRINGTerminalRuleCall_5_30_1_0; }

		//('user' user=STRING)?
		public Group getGroup_5_31() { return cGroup_5_31; }

		//'user'
		public Keyword getUserKeyword_5_31_0() { return cUserKeyword_5_31_0; }

		//user=STRING
		public Assignment getUserAssignment_5_31_1() { return cUserAssignment_5_31_1; }

		//STRING
		public RuleCall getUserSTRINGTerminalRuleCall_5_31_1_0() { return cUserSTRINGTerminalRuleCall_5_31_1_0; }

		//('tty' tty=EBoolean)?
		public Group getGroup_5_32() { return cGroup_5_32; }

		//'tty'
		public Keyword getTtyKeyword_5_32_0() { return cTtyKeyword_5_32_0; }

		//tty=EBoolean
		public Assignment getTtyAssignment_5_32_1() { return cTtyAssignment_5_32_1; }

		//EBoolean
		public RuleCall getTtyEBooleanParserRuleCall_5_32_1_0() { return cTtyEBooleanParserRuleCall_5_32_1_0; }

		//('restartPolicy' restartPolicy=RestartPolicy)?
		public Group getGroup_5_33() { return cGroup_5_33; }

		//'restartPolicy'
		public Keyword getRestartPolicyKeyword_5_33_0() { return cRestartPolicyKeyword_5_33_0; }

		//restartPolicy=RestartPolicy
		public Assignment getRestartPolicyAssignment_5_33_1() { return cRestartPolicyAssignment_5_33_1; }

		//RestartPolicy
		public RuleCall getRestartPolicyRestartPolicyParserRuleCall_5_33_1_0() { return cRestartPolicyRestartPolicyParserRuleCall_5_33_1_0; }

		//('volumes' '{' ('-' volumes+=Volume)+ '}')?
		public Group getGroup_5_34() { return cGroup_5_34; }

		//'volumes'
		public Keyword getVolumesKeyword_5_34_0() { return cVolumesKeyword_5_34_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_34_1() { return cLeftCurlyBracketKeyword_5_34_1; }

		//('-' volumes+=Volume)+
		public Group getGroup_5_34_2() { return cGroup_5_34_2; }

		//'-'
		public Keyword getHyphenMinusKeyword_5_34_2_0() { return cHyphenMinusKeyword_5_34_2_0; }

		//volumes+=Volume
		public Assignment getVolumesAssignment_5_34_2_1() { return cVolumesAssignment_5_34_2_1; }

		//Volume
		public RuleCall getVolumesVolumeParserRuleCall_5_34_2_1_0() { return cVolumesVolumeParserRuleCall_5_34_2_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_34_3() { return cRightCurlyBracketKeyword_5_34_3; }

		//('volumesFrom' '{' ('-' volumesFrom+=VolumesFrom)+ '}')?
		public Group getGroup_5_35() { return cGroup_5_35; }

		//'volumesFrom'
		public Keyword getVolumesFromKeyword_5_35_0() { return cVolumesFromKeyword_5_35_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_35_1() { return cLeftCurlyBracketKeyword_5_35_1; }

		//('-' volumesFrom+=VolumesFrom)+
		public Group getGroup_5_35_2() { return cGroup_5_35_2; }

		//'-'
		public Keyword getHyphenMinusKeyword_5_35_2_0() { return cHyphenMinusKeyword_5_35_2_0; }

		//volumesFrom+=VolumesFrom
		public Assignment getVolumesFromAssignment_5_35_2_1() { return cVolumesFromAssignment_5_35_2_1; }

		//VolumesFrom
		public RuleCall getVolumesFromVolumesFromParserRuleCall_5_35_2_1_0() { return cVolumesFromVolumesFromParserRuleCall_5_35_2_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_35_3() { return cRightCurlyBracketKeyword_5_35_3; }

		//('ulimits' '{' ('-' ulimits+=Ulimit)+ '}')?
		public Group getGroup_5_36() { return cGroup_5_36; }

		//'ulimits'
		public Keyword getUlimitsKeyword_5_36_0() { return cUlimitsKeyword_5_36_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_36_1() { return cLeftCurlyBracketKeyword_5_36_1; }

		//('-' ulimits+=Ulimit)+
		public Group getGroup_5_36_2() { return cGroup_5_36_2; }

		//'-'
		public Keyword getHyphenMinusKeyword_5_36_2_0() { return cHyphenMinusKeyword_5_36_2_0; }

		//ulimits+=Ulimit
		public Assignment getUlimitsAssignment_5_36_2_1() { return cUlimitsAssignment_5_36_2_1; }

		//Ulimit
		public RuleCall getUlimitsUlimitParserRuleCall_5_36_2_1_0() { return cUlimitsUlimitParserRuleCall_5_36_2_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_36_3() { return cRightCurlyBracketKeyword_5_36_3; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class VolumesFromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.VolumesFrom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContainerContainerCrossReference_1_0 = (CrossReference)cContainerAssignment_1.eContents().get(0);
		private final RuleCall cContainerContainerIDTerminalRuleCall_1_0_1 = (RuleCall)cContainerContainerCrossReference_1_0.eContents().get(1);
		private final Assignment cAccessModeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessModeAccessModeEnumRuleCall_2_0 = (RuleCall)cAccessModeAssignment_2.eContents().get(0);
		
		//VolumesFrom:
		//	'-' container=[Container] accessMode=AccessMode;
		@Override public ParserRule getRule() { return rule; }

		//'-' container=[Container] accessMode=AccessMode
		public Group getGroup() { return cGroup; }

		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//container=[Container]
		public Assignment getContainerAssignment_1() { return cContainerAssignment_1; }

		//[Container]
		public CrossReference getContainerContainerCrossReference_1_0() { return cContainerContainerCrossReference_1_0; }

		//ID
		public RuleCall getContainerContainerIDTerminalRuleCall_1_0_1() { return cContainerContainerIDTerminalRuleCall_1_0_1; }

		//accessMode=AccessMode
		public Assignment getAccessModeAssignment_2() { return cAccessModeAssignment_2; }

		//AccessMode
		public RuleCall getAccessModeAccessModeEnumRuleCall_2_0() { return cAccessModeAccessModeEnumRuleCall_2_0; }
	}

	public class RestartPolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.RestartPolicy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMaximumRetryCountAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaximumRetryCountINTTerminalRuleCall_2_0 = (RuleCall)cMaximumRetryCountAssignment_2.eContents().get(0);
		
		//RestartPolicy:
		//	'-' name=STRING
		//	maximumRetryCount=INT;
		@Override public ParserRule getRule() { return rule; }

		//'-' name=STRING maximumRetryCount=INT
		public Group getGroup() { return cGroup; }

		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//maximumRetryCount=INT
		public Assignment getMaximumRetryCountAssignment_2() { return cMaximumRetryCountAssignment_2; }

		//INT
		public RuleCall getMaximumRetryCountINTTerminalRuleCall_2_0() { return cMaximumRetryCountINTTerminalRuleCall_2_0; }
	}

	public class PortBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.PortBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBindingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBindingBindingParserRuleCall_1_0 = (RuleCall)cBindingAssignment_1.eContents().get(0);
		private final Assignment cExposedPortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cExposedPortExposedPortCrossReference_2_0 = (CrossReference)cExposedPortAssignment_2.eContents().get(0);
		private final RuleCall cExposedPortExposedPortSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cExposedPortExposedPortCrossReference_2_0.eContents().get(1);
		
		//PortBinding:
		//	'-' binding=Binding
		//	exposedPort=[ExposedPort|STRING];
		@Override public ParserRule getRule() { return rule; }

		//'-' binding=Binding exposedPort=[ExposedPort|STRING]
		public Group getGroup() { return cGroup; }

		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//binding=Binding
		public Assignment getBindingAssignment_1() { return cBindingAssignment_1; }

		//Binding
		public RuleCall getBindingBindingParserRuleCall_1_0() { return cBindingBindingParserRuleCall_1_0; }

		//exposedPort=[ExposedPort|STRING]
		public Assignment getExposedPortAssignment_2() { return cExposedPortAssignment_2; }

		//[ExposedPort|STRING]
		public CrossReference getExposedPortExposedPortCrossReference_2_0() { return cExposedPortExposedPortCrossReference_2_0; }

		//STRING
		public RuleCall getExposedPortExposedPortSTRINGTerminalRuleCall_2_0_1() { return cExposedPortExposedPortSTRINGTerminalRuleCall_2_0_1; }
	}

	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHostIPAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHostIPSTRINGTerminalRuleCall_1_0 = (RuleCall)cHostIPAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHostPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHostPortINTTerminalRuleCall_3_0 = (RuleCall)cHostPortAssignment_3.eContents().get(0);
		
		//Binding:
		//	'-' hostIP=STRING ':' hostPort=INT;
		@Override public ParserRule getRule() { return rule; }

		//'-' hostIP=STRING ':' hostPort=INT
		public Group getGroup() { return cGroup; }

		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//hostIP=STRING
		public Assignment getHostIPAssignment_1() { return cHostIPAssignment_1; }

		//STRING
		public RuleCall getHostIPSTRINGTerminalRuleCall_1_0() { return cHostIPSTRINGTerminalRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//hostPort=INT
		public Assignment getHostPortAssignment_3() { return cHostPortAssignment_3; }

		//INT
		public RuleCall getHostPortINTTerminalRuleCall_3_0() { return cHostPortINTTerminalRuleCall_3_0; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerLinkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContainerLinkContainerCrossReference_1_0 = (CrossReference)cContainerLinkAssignment_1.eContents().get(0);
		private final RuleCall cContainerLinkContainerIDTerminalRuleCall_1_0_1 = (RuleCall)cContainerLinkContainerCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAliasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAliasSTRINGTerminalRuleCall_3_0 = (RuleCall)cAliasAssignment_3.eContents().get(0);
		
		//Link:
		//	'-' containerLink=[Container] ':' alias=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'-' containerLink=[Container] ':' alias=STRING
		public Group getGroup() { return cGroup; }

		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//containerLink=[Container]
		public Assignment getContainerLinkAssignment_1() { return cContainerLinkAssignment_1; }

		//[Container]
		public CrossReference getContainerLinkContainerCrossReference_1_0() { return cContainerLinkContainerCrossReference_1_0; }

		//ID
		public RuleCall getContainerLinkContainerIDTerminalRuleCall_1_0_1() { return cContainerLinkContainerIDTerminalRuleCall_1_0_1; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//alias=STRING
		public Assignment getAliasAssignment_3() { return cAliasAssignment_3; }

		//STRING
		public RuleCall getAliasSTRINGTerminalRuleCall_3_0() { return cAliasSTRINGTerminalRuleCall_3_0; }
	}

	public class UlimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.Ulimit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSoftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSoftINTTerminalRuleCall_2_0 = (RuleCall)cSoftAssignment_2.eContents().get(0);
		private final Assignment cHardAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHardINTTerminalRuleCall_3_0 = (RuleCall)cHardAssignment_3.eContents().get(0);
		
		//Ulimit:
		//	'-'
		//	name=STRING
		//	soft=INT
		//	hard=INT;
		@Override public ParserRule getRule() { return rule; }

		//'-' name=STRING soft=INT hard=INT
		public Group getGroup() { return cGroup; }

		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//soft=INT
		public Assignment getSoftAssignment_2() { return cSoftAssignment_2; }

		//INT
		public RuleCall getSoftINTTerminalRuleCall_2_0() { return cSoftINTTerminalRuleCall_2_0; }

		//hard=INT
		public Assignment getHardAssignment_3() { return cHardAssignment_3; }

		//INT
		public RuleCall getHardINTTerminalRuleCall_3_0() { return cHardINTTerminalRuleCall_3_0; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Label:
		//	key=STRING value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//key=STRING value=STRING
		public Group getGroup() { return cGroup; }

		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class ExposedPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.ExposedPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPortSTRINGTerminalRuleCall_1_0 = (RuleCall)cPortAssignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProtocolAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProtocolInternalProtocolEnumRuleCall_3_0 = (RuleCall)cProtocolAssignment_3.eContents().get(0);
		
		//ExposedPort:
		//	'-'
		//	port=STRING '/' protocol=InternalProtocol;
		@Override public ParserRule getRule() { return rule; }

		//'-' port=STRING '/' protocol=InternalProtocol
		public Group getGroup() { return cGroup; }

		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//port=STRING
		public Assignment getPortAssignment_1() { return cPortAssignment_1; }

		//STRING
		public RuleCall getPortSTRINGTerminalRuleCall_1_0() { return cPortSTRINGTerminalRuleCall_1_0; }

		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }

		//protocol=InternalProtocol
		public Assignment getProtocolAssignment_3() { return cProtocolAssignment_3; }

		//InternalProtocol
		public RuleCall getProtocolInternalProtocolEnumRuleCall_3_0() { return cProtocolInternalProtocolEnumRuleCall_3_0; }
	}

	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.Device");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCGroupPermissionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCGroupPermissionsSTRINGTerminalRuleCall_1_0 = (RuleCall)cCGroupPermissionsAssignment_1.eContents().get(0);
		private final Assignment cPathOnHostAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathOnHostSTRINGTerminalRuleCall_2_0 = (RuleCall)cPathOnHostAssignment_2.eContents().get(0);
		private final Assignment cPathInContainerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathInContainerSTRINGTerminalRuleCall_3_0 = (RuleCall)cPathInContainerAssignment_3.eContents().get(0);
		
		//Device:
		//	'-' cGroupPermissions=STRING
		//	pathOnHost=STRING
		//	pathInContainer=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'-' cGroupPermissions=STRING pathOnHost=STRING pathInContainer=STRING
		public Group getGroup() { return cGroup; }

		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//cGroupPermissions=STRING
		public Assignment getCGroupPermissionsAssignment_1() { return cCGroupPermissionsAssignment_1; }

		//STRING
		public RuleCall getCGroupPermissionsSTRINGTerminalRuleCall_1_0() { return cCGroupPermissionsSTRINGTerminalRuleCall_1_0; }

		//pathOnHost=STRING
		public Assignment getPathOnHostAssignment_2() { return cPathOnHostAssignment_2; }

		//STRING
		public RuleCall getPathOnHostSTRINGTerminalRuleCall_2_0() { return cPathOnHostSTRINGTerminalRuleCall_2_0; }

		//pathInContainer=STRING
		public Assignment getPathInContainerAssignment_3() { return cPathInContainerAssignment_3; }

		//STRING
		public RuleCall getPathInContainerSTRINGTerminalRuleCall_3_0() { return cPathInContainerSTRINGTerminalRuleCall_3_0; }
	}

	public class BindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.Bind");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLocationSTRINGTerminalRuleCall_1_0 = (RuleCall)cLocationAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVolumeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVolumeVolumeParserRuleCall_3_0 = (RuleCall)cVolumeAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAccessMode1Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAccessMode1AccessModeEnumRuleCall_5_0 = (RuleCall)cAccessMode1Assignment_5.eContents().get(0);
		
		//Bind:
		//	'-'
		//	location=STRING ':'
		//	volume=Volume ':'
		//	accessMode1=AccessMode;
		@Override public ParserRule getRule() { return rule; }

		//'-' location=STRING ':' volume=Volume ':' accessMode1=AccessMode
		public Group getGroup() { return cGroup; }

		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//location=STRING
		public Assignment getLocationAssignment_1() { return cLocationAssignment_1; }

		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_1_0() { return cLocationSTRINGTerminalRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//volume=Volume
		public Assignment getVolumeAssignment_3() { return cVolumeAssignment_3; }

		//Volume
		public RuleCall getVolumeVolumeParserRuleCall_3_0() { return cVolumeVolumeParserRuleCall_3_0; }

		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//accessMode1=AccessMode
		public Assignment getAccessMode1Assignment_5() { return cAccessMode1Assignment_5; }

		//AccessMode
		public RuleCall getAccessMode1AccessModeEnumRuleCall_5_0() { return cAccessMode1AccessModeEnumRuleCall_5_0; }
	}

	public class VolumeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.Volume");
		private final Assignment cPathAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_0 = (RuleCall)cPathAssignment.eContents().get(0);
		
		//Volume:
		//	path=STRING;
		@Override public ParserRule getRule() { return rule; }

		//path=STRING
		public Assignment getPathAssignment() { return cPathAssignment; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_0() { return cPathSTRINGTerminalRuleCall_0; }
	}
	
	
	public class InternalProtocolElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.InternalProtocol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTCPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTCPTCPKeyword_0_0 = (Keyword)cTCPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUDPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUDPUDPKeyword_1_0 = (Keyword)cUDPEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum InternalProtocol:
		//	TCP | UDP;
		public EnumRule getRule() { return rule; }

		//TCP | UDP
		public Alternatives getAlternatives() { return cAlternatives; }

		//TCP
		public EnumLiteralDeclaration getTCPEnumLiteralDeclaration_0() { return cTCPEnumLiteralDeclaration_0; }

		//"TCP"
		public Keyword getTCPTCPKeyword_0_0() { return cTCPTCPKeyword_0_0; }

		//UDP
		public EnumLiteralDeclaration getUDPEnumLiteralDeclaration_1() { return cUDPEnumLiteralDeclaration_1; }

		//"UDP"
		public Keyword getUDPUDPKeyword_1_0() { return cUDPUDPKeyword_1_0; }
	}

	public class AccessModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.AccessMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRwEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRwRwKeyword_0_0 = (Keyword)cRwEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRoEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRoRoKeyword_1_0 = (Keyword)cRoEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AccessMode:
		//	rw | ro;
		public EnumRule getRule() { return rule; }

		//rw | ro
		public Alternatives getAlternatives() { return cAlternatives; }

		//rw
		public EnumLiteralDeclaration getRwEnumLiteralDeclaration_0() { return cRwEnumLiteralDeclaration_0; }

		//"rw"
		public Keyword getRwRwKeyword_0_0() { return cRwRwKeyword_0_0; }

		//ro
		public EnumLiteralDeclaration getRoEnumLiteralDeclaration_1() { return cRoEnumLiteralDeclaration_1; }

		//"ro"
		public Keyword getRoRoKeyword_1_0() { return cRoRoKeyword_1_0; }
	}

	public class CapabilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.docker.language.Container.Capability");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALLALLKeyword_0_0 = (Keyword)cALLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAUDIT_CONTROLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAUDIT_CONTROLAUDIT_CONTROLKeyword_1_0 = (Keyword)cAUDIT_CONTROLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAUDIT_WRITEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAUDIT_WRITEAUDIT_WRITEKeyword_2_0 = (Keyword)cAUDIT_WRITEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBLOCK_SUSPENDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBLOCK_SUSPENDBLOCK_SUSPENDKeyword_3_0 = (Keyword)cBLOCK_SUSPENDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCHOWNEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCHOWNCHOWNKeyword_4_0 = (Keyword)cCHOWNEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDAC_OVERRIDEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDAC_OVERRIDEDAC_OVERRIDEKeyword_5_0 = (Keyword)cDAC_OVERRIDEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDAC_READ_SEARCHEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDAC_READ_SEARCHDAC_READ_SEARCHKeyword_6_0 = (Keyword)cDAC_READ_SEARCHEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cFOWNEREnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cFOWNERFOWNERKeyword_7_0 = (Keyword)cFOWNEREnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cFSETIDEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cFSETIDFSETIDKeyword_8_0 = (Keyword)cFSETIDEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cIPC_LOCKEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cIPC_LOCKIPC_LOCKKeyword_9_0 = (Keyword)cIPC_LOCKEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cIPC_OWNEREnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cIPC_OWNERIPC_OWNERKeyword_10_0 = (Keyword)cIPC_OWNEREnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cKILLEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cKILLKILLKeyword_11_0 = (Keyword)cKILLEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cLEASEEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cLEASELEASEKeyword_12_0 = (Keyword)cLEASEEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cLINUX_IMMUTABLEEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cLINUX_IMMUTABLELINUX_IMMUTABLEKeyword_13_0 = (Keyword)cLINUX_IMMUTABLEEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cMAC_ADMINEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cMAC_ADMINMAC_ADMINKeyword_14_0 = (Keyword)cMAC_ADMINEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cMAC_OVERRIDEEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cMAC_OVERRIDEMAC_OVERRIDEKeyword_15_0 = (Keyword)cMAC_OVERRIDEEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cMKNODEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cMKNODMKNODKeyword_16_0 = (Keyword)cMKNODEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cNET_ADMINEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cNET_ADMINNET_ADMINKeyword_17_0 = (Keyword)cNET_ADMINEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cNET_BIND_SERVICEEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cNET_BIND_SERVICENET_BIND_SERVICEKeyword_18_0 = (Keyword)cNET_BIND_SERVICEEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cNET_BROADCASTEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cNET_BROADCASTNET_BROADCASTKeyword_19_0 = (Keyword)cNET_BROADCASTEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cNET_RAWEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cNET_RAWNET_RAWKeyword_20_0 = (Keyword)cNET_RAWEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cSETFCAPEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cSETFCAPSETFCAPKeyword_21_0 = (Keyword)cSETFCAPEnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cSETGIDEnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cSETGIDSETGIDKeyword_22_0 = (Keyword)cSETGIDEnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cSETPCAPEnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cSETPCAPSETPCAPKeyword_23_0 = (Keyword)cSETPCAPEnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cSETUIDEnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cSETUIDSETUIDKeyword_24_0 = (Keyword)cSETUIDEnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cSYS_ADMINEnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cSYS_ADMINSYS_ADMINKeyword_25_0 = (Keyword)cSYS_ADMINEnumLiteralDeclaration_25.eContents().get(0);
		private final EnumLiteralDeclaration cSYS_BOOTEnumLiteralDeclaration_26 = (EnumLiteralDeclaration)cAlternatives.eContents().get(26);
		private final Keyword cSYS_BOOTSYS_BOOTKeyword_26_0 = (Keyword)cSYS_BOOTEnumLiteralDeclaration_26.eContents().get(0);
		private final EnumLiteralDeclaration cSYS_CHROOTEnumLiteralDeclaration_27 = (EnumLiteralDeclaration)cAlternatives.eContents().get(27);
		private final Keyword cSYS_CHROOTSYS_CHROOTKeyword_27_0 = (Keyword)cSYS_CHROOTEnumLiteralDeclaration_27.eContents().get(0);
		private final EnumLiteralDeclaration cSYSLOGEnumLiteralDeclaration_28 = (EnumLiteralDeclaration)cAlternatives.eContents().get(28);
		private final Keyword cSYSLOGSYSLOGKeyword_28_0 = (Keyword)cSYSLOGEnumLiteralDeclaration_28.eContents().get(0);
		private final EnumLiteralDeclaration cSYS_MODULEEnumLiteralDeclaration_29 = (EnumLiteralDeclaration)cAlternatives.eContents().get(29);
		private final Keyword cSYS_MODULESYS_MODULEKeyword_29_0 = (Keyword)cSYS_MODULEEnumLiteralDeclaration_29.eContents().get(0);
		private final EnumLiteralDeclaration cSYS_NICEEnumLiteralDeclaration_30 = (EnumLiteralDeclaration)cAlternatives.eContents().get(30);
		private final Keyword cSYS_NICESYS_NICEKeyword_30_0 = (Keyword)cSYS_NICEEnumLiteralDeclaration_30.eContents().get(0);
		private final EnumLiteralDeclaration cSYS_PACCTEnumLiteralDeclaration_31 = (EnumLiteralDeclaration)cAlternatives.eContents().get(31);
		private final Keyword cSYS_PACCTSYS_PACCTKeyword_31_0 = (Keyword)cSYS_PACCTEnumLiteralDeclaration_31.eContents().get(0);
		private final EnumLiteralDeclaration cSYS_PTRACEEnumLiteralDeclaration_32 = (EnumLiteralDeclaration)cAlternatives.eContents().get(32);
		private final Keyword cSYS_PTRACESYS_PTRACEKeyword_32_0 = (Keyword)cSYS_PTRACEEnumLiteralDeclaration_32.eContents().get(0);
		private final EnumLiteralDeclaration cSYS_RAWIOEnumLiteralDeclaration_33 = (EnumLiteralDeclaration)cAlternatives.eContents().get(33);
		private final Keyword cSYS_RAWIOSYS_RAWIOKeyword_33_0 = (Keyword)cSYS_RAWIOEnumLiteralDeclaration_33.eContents().get(0);
		private final EnumLiteralDeclaration cSYS_RESOURCEEnumLiteralDeclaration_34 = (EnumLiteralDeclaration)cAlternatives.eContents().get(34);
		private final Keyword cSYS_RESOURCESYS_RESOURCEKeyword_34_0 = (Keyword)cSYS_RESOURCEEnumLiteralDeclaration_34.eContents().get(0);
		private final EnumLiteralDeclaration cSYS_TIMEEnumLiteralDeclaration_35 = (EnumLiteralDeclaration)cAlternatives.eContents().get(35);
		private final Keyword cSYS_TIMESYS_TIMEKeyword_35_0 = (Keyword)cSYS_TIMEEnumLiteralDeclaration_35.eContents().get(0);
		private final EnumLiteralDeclaration cSYS_TTY_CONFIGEnumLiteralDeclaration_36 = (EnumLiteralDeclaration)cAlternatives.eContents().get(36);
		private final Keyword cSYS_TTY_CONFIGSYS_TTY_CONFIGKeyword_36_0 = (Keyword)cSYS_TTY_CONFIGEnumLiteralDeclaration_36.eContents().get(0);
		private final EnumLiteralDeclaration cWAKE_ALARMEnumLiteralDeclaration_37 = (EnumLiteralDeclaration)cAlternatives.eContents().get(37);
		private final Keyword cWAKE_ALARMWAKE_ALARMKeyword_37_0 = (Keyword)cWAKE_ALARMEnumLiteralDeclaration_37.eContents().get(0);
		
		//enum Capability: / **
		//     * This meta capability includes all Linux capabilities.
		//     * / ALL | / **
		//     * <ul>
		//     * <li>Enable and disable kernel auditing.
		//     * <li>Change auditing filter rules.
		//     * <li>Retrieve auditing status and filtering rules.
		//     * </ul>
		//     * / AUDIT_CONTROL | / **
		//     * Write records to kernel auditing log.
		//     * / AUDIT_WRITE | / **
		//     * Employ features that can block system suspend.
		//     * / BLOCK_SUSPEND | / **
		//     * Make arbitrary changes to file UIDs and GIDs (see chown(2)).
		//     * / CHOWN | / **
		//     * Bypass file read, write, and execute permission checks. (DAC is an abbreviation of "discretionary access control".)
		//     * / DAC_OVERRIDE | / **
		//     * Bypass file read permission checks and directory read and execute permission checks.
		//     * / DAC_READ_SEARCH | / **
		//     * <ul>
		//     * <li>Bypass permission checks on operations that normally require the file system UID of the process to match the UID of the file
		//     * (e.g., chmod(2), utime(2)), excluding those operations covered by the {@link #DAC_OVERRIDE} and {@link #DAC_READ_SEARCH}.
		//     * <li>Set extended file attributes (see chattr(1)) on arbitrary files.
		//     * <li>Set Access Control Lists (ACLs) on arbitrary files.
		//     * <li>Ignore directory sticky bit on file deletion.
		//     * <li>Specify O_NOATIME for arbitrary files in open(2)and fcntl(2).
		//     * </ul>
		//     * / FOWNER | / **
		//     * <ul>
		//     * <li>Don't clear set-user-ID and set-group-ID permission bits when a file is modified.
		//     * <li>Set the set-group-ID bit for a file whose GID does not match the file system or any of the supplementary GIDs of the calling
		//     * process.
		//     * </ul>
		//     * / FSETID | / **
		//     * Permit memory locking (mlock(2), mlockall(2), mmap(2), shmctl(2)).
		//     * / IPC_LOCK | / **
		//     * Bypass permission checks for operations on System V IPC objects.
		//     * / IPC_OWNER | / **
		//     * Bypass permission checks for sending signals (see kill(2)). This includes use of the ioctl(2) KDSIGACCEPT operation.
		//     * / KILL | / **
		//     * Establish leases on arbitrary files (see fcntl(2)).
		//     * / LEASE | / **
		//     * Set the FS_APPEND_FL and FS_IMMUTABLE_FL i-node flags (see chattr(1)).
		//     * / LINUX_IMMUTABLE | / **
		//     * Override Mandatory Access Control (MAC). Implemented for the Smack Linux Security Module (LSM).
		//     * / MAC_ADMIN | / **
		//     * Allow MAC configuration or state changes. Implemented for the Smack LSM.
		//     * / MAC_OVERRIDE | / **
		//     * Create special files using mknod(2).
		//     * / MKNOD | / **
		//     * Perform various network-related operations:
		//     * <ul>
		//     * <li>Interface configuration.
		//     * <li>Administration of IP firewall, masquerading, and accounting.
		//     * <li>Modify routing tables.
		//     * <li>Bind to any address for transparent proxying.
		//     * <li>Set type-of-service (TOS).
		//     * <li>Clear driver statistics.
		//     * <li>Set promiscuous mode.
		//     * <li>Enabling multicasting.
		//     * <li>Use setsockopt(2) to set the following socket options: SO_DEBUG, SO_MARK, SO_PRIORITY (for a priority outside the range 0 to 6),
		//     * SO_RCVBUFFORCE, and SO_SNDBUFFORCE.
		//     * </ul>
		//     * / NET_ADMIN | / **
		//     * Bind a socket to Internet domain privileged ports (port numbers less than 1024).
		//     * / NET_BIND_SERVICE | / **
		//     * (Unused) Make socket broadcasts, and listen to multicasts.
		//     * / NET_BROADCAST | / **
		//     * <ul>
		//     * <li>Use RAW and PACKET sockets.
		//     * <li>Bind to any address for transparent proxying.
		//     * </ul>
		//     * / NET_RAW | / **
		//     * Set file capabilities.
		//     * / SETFCAP | / **
		//     * <ul>
		//     * <li>Make arbitrary manipulations of process GIDs and supplementary GID list.
		//     * <li>Forge GID when passing socket credentials via UNIX domain sockets.
		//     * </ul>
		//     * / SETGID | / **
		//     * If file capabilities are not supported:
		//     * <ul>
		//     * <li>grant or remove any capability in the caller's permitted capability set to or from any other process. (This property of
		//     * CAP_SETPCAP is not available when the kernel is configured to support file capabilities, since CAP_SETPCAP has entirely different
		//     * semantics for such kernels.)
		//     * </ul>
		//     * <p>
		//     * If file capabilities are supported:
		//     * <ul>
		//     * <li>Add any capability from the calling thread's bounding set to its inheritable set.
		//     * <li>Drop capabilities from the bounding set (via prctl(2) PR_CAPBSET_DROP).
		//     * <li>Make changes to the securebits flags.
		//     * </ul>
		//     * / SETPCAP | / **
		//     * <ul>
		//     * <li>Make arbitrary manipulations of process UIDs (setuid(2), setreuid(2), setresuid(2), setfsuid(2)).
		//     * <li>Make forged UID when passing socket credentials via UNIX domain sockets.
		//     * </ul>
		//     * / SETUID | / **
		//     * <ul>
		//     * <li>Perform a range of system administration operations including: quotactl(2), mount(2), umount(2), swapon(2), swapoff(2),
		//     * sethostname(2), and setdomainname(2).
		//     * <li>Perform privileged syslog(2) operations (since Linux 2.6.37, CAP_SYSLOG should be used to permit such operations).
		//     * <li>Perform VM86_REQUEST_IRQ vm86(2) command.
		//     * <li>Perform IPC_SET and IPC_RMID operations on arbitrary System V IPC objects.
		//     * <li>Perform operations on trusted and security Extended Attributes (see attr(5)).
		//     * <li>Use lookup_dcookie(2)
		//     * <li>Use ioprio_set(2) to assign IOPRIO_CLASS_RT and (before Linux 2.6.25) IOPRIO_CLASS_IDLE I/O scheduling classes.
		//     * <li>Forge UID when passing socket credentials.
		//     * <li>Exceed /proc/sys/fs/file-max, the system-wide limit on the number of open files, in system calls that open files (e.g.,
		//     * accept(2), execve(2), open(2), pipe(2)).
		//     * <li>Employ CLONE_* flags that create new namespaces with clone(2) and unshare(2).
		//     * <li>Call perf_event_open(2).
		//     * <li>Access privileged perf event information.
		//     * <li>Call setns(2).
		//     * <li>Call fanotify_init(2).
		//     * <li>Perform KEYCTL_CHOWN and KEYCTL_SETPERM keyctl(2) operations.
		//     * <li>Perform madvise(2) MADV_HWPOISON operation.
		//     * <li>Employ the TIOCSTI ioctl(2) to insert characters into the input queue of a terminal other than the caller's controlling terminal.
		//     * <li>Employ the obsolete nfsservctl(2) system call.
		//     * <li>Employ the obsolete bdflush(2) system call.
		//     * <li>Perform various privileged block-device ioctl(2) operations.
		//     * <li>Perform various privileged file-system ioctl(2) operations.
		//     * <li>Perform administrative operations on many device drivers.
		//     * </ul>
		//     * / SYS_ADMIN | / **
		//     * Use reboot(2) and kexec_load(2).
		//     * / SYS_BOOT | / **
		//     * Use chroot(2).
		//     * / SYS_CHROOT | / **
		//     * <ul>
		//     * <li>Perform privileged syslog(2) operations. See syslog(2) for information on which operations require privilege.
		//     * <li>View kernel addresses exposed via /proc and other interfaces when /proc/sys/kernel/kptr_restrict has the value 1. (See the
		//     * discussion of the kptr_restrict in proc(5).)
		//     * </ul>
		//     * / SYSLOG | / **
		//     * <ul>
		//     * <li>Load and unload kernel modules (see init_module(2) and delete_module(2))
		//     * <li>In kernels before 2.6.25: drop capabilities from the system-wide capability bounding set.
		//     * </ul>
		//     * / SYS_MODULE | / **
		//     * <ul>
		//     * <li>Raise process nice value (nice(2), setpriority(2)) and change the nice value for arbitrary processes.
		//     * <li>Set real-time scheduling policies for calling process, and set scheduling policies and priorities for arbitrary processes
		//     * (sched_setscheduler(2), sched_setparam(2)).
		//     * <li>Set CPU affinity for arbitrary processes (sched_setaffinity(2)).
		//     * <li>Set I/O scheduling class and priority for arbitrary processes (ioprio_set(2)).
		//     * <li>Apply migrate_pages(2) to arbitrary processes and allow processes to be migrated to arbitrary nodes.
		//     * <li>Apply move_pages(2) to arbitrary processes.
		//     * <li>Use the MPOL_MF_MOVE_ALL flag with mbind(2) and move_pages(2).
		//     * </ul>
		//     * / SYS_NICE | / **
		//     * Use acct(2).
		//     * / SYS_PACCT | / **
		//     * <ul>
		//     * <li>Trace arbitrary processes using ptrace(2).
		//     * <li>Apply get_robust_list(2) to arbitrary processes.
		//     * <li>Inspect processes using kcmp(2).
		//     * </ul>
		//     * / SYS_PTRACE | / **
		//     * <ul>
		//     * <li>Perform I/O port operations (iopl(2) and ioperm(2)).
		//     * <li>Access /proc/kcore.
		//     * <li>Employ the FIBMAP ioctl(2) operation.
		//     * <li>Open devices for accessing x86 model-specific registers (MSRs, see msr(4)).
		//     * <li>Update /proc/sys/vm/mmap_min_addr.
		//     * <li>Create memory mappings at addresses below the value specified by /proc/sys/vm/mmap_min_addr.
		//     * <li>Map files in /proc/pci/bus.
		//     * <li>Open /dev/mem and /dev/kmem.
		//     * <li>Perform various SCSI device commands.
		//     * <li>Perform certain operations on hpsa(4) and cciss(4) devices.
		//     * <li>Perform a range of device-specific operations on other devices.
		//     * </ul>
		//     * / SYS_RAWIO | / **
		//     * <ul>
		//     * <li>Use reserved space on ext2 file systems.
		//     * <li>Make ioctl(2) calls controlling ext3 journaling.
		//     * <li>Override disk quota limits.
		//     * <li>Increase resource limits (see setrlimit(2)).
		//     * <li>Override RLIMIT_NPROC resource limit.
		//     * <li>Override maximum number of consoles on console allocation.
		//     * <li>Override maximum number of keymaps.
		//     * <li>Allow more than 64hz interrupts from the real-time clock.
		//     * <li>Raise msg_qbytes limit for a System V message queue above the limit in /proc/sys/kernel/msgmnb (see msgop(2) and msgctl(2)).
		//     * <li>Override the /proc/sys/fs/pipe-size-max limit when setting the capacity of a pipe using the F_SETPIPE_SZ fcntl(2) command.
		//     * <li>Use F_SETPIPE_SZ to increase the capacity of a pipe above the limit specified by /proc/sys/fs/pipe-max-size.
		//     * <li>Override /proc/sys/fs/mqueue/queues_max limit when creating POSIX message queues (see mq_overview(7)).
		//     * <li>Employ prctl(2) PR_SET_MM operation.
		//     * <li>Set /proc/PID/oom_score_adj to a value lower than the value last set by a process with CAP_SYS_RESOURCE.
		//     * </ul>
		//     * / SYS_RESOURCE | / **
		//     * <ul>
		//     * <li>Set system clock (settimeofday(2), stime(2), adjtimex(2)).
		//     * <li>Set real-time (hardware) clock.
		//     * </ul>
		//     * / SYS_TIME | / **
		//     * <ul>
		//     * <li>Use vhangup(2).
		//     * <li>Employ various privileged ioctl(2) operations on virtual terminals.
		//     * </ul>
		//     * / SYS_TTY_CONFIG | / **
		//     * Trigger something that will wake up the system (set CLOCK_REALTIME_ALARM and CLOCK_BOOTTIME_ALARM timers).
		//     * / WAKE_ALARM;
		public EnumRule getRule() { return rule; }

		/// **
		//     * This meta capability includes all Linux capabilities.
		//     * / ALL | / **
		//     * <ul>
		//     * <li>Enable and disable kernel auditing.
		//     * <li>Change auditing filter rules.
		//     * <li>Retrieve auditing status and filtering rules.
		//     * </ul>
		//     * / AUDIT_CONTROL | / **
		//     * Write records to kernel auditing log.
		//     * / AUDIT_WRITE | / **
		//     * Employ features that can block system suspend.
		//     * / BLOCK_SUSPEND | / **
		//     * Make arbitrary changes to file UIDs and GIDs (see chown(2)).
		//     * / CHOWN | / **
		//     * Bypass file read, write, and execute permission checks. (DAC is an abbreviation of "discretionary access control".)
		//     * / DAC_OVERRIDE | / **
		//     * Bypass file read permission checks and directory read and execute permission checks.
		//     * / DAC_READ_SEARCH | / **
		//     * <ul>
		//     * <li>Bypass permission checks on operations that normally require the file system UID of the process to match the UID of the file
		//     * (e.g., chmod(2), utime(2)), excluding those operations covered by the {@link #DAC_OVERRIDE} and {@link #DAC_READ_SEARCH}.
		//     * <li>Set extended file attributes (see chattr(1)) on arbitrary files.
		//     * <li>Set Access Control Lists (ACLs) on arbitrary files.
		//     * <li>Ignore directory sticky bit on file deletion.
		//     * <li>Specify O_NOATIME for arbitrary files in open(2)and fcntl(2).
		//     * </ul>
		//     * / FOWNER | / **
		//     * <ul>
		//     * <li>Don't clear set-user-ID and set-group-ID permission bits when a file is modified.
		//     * <li>Set the set-group-ID bit for a file whose GID does not match the file system or any of the supplementary GIDs of the calling
		//     * process.
		//     * </ul>
		//     * / FSETID | / **
		//     * Permit memory locking (mlock(2), mlockall(2), mmap(2), shmctl(2)).
		//     * / IPC_LOCK | / **
		//     * Bypass permission checks for operations on System V IPC objects.
		//     * / IPC_OWNER | / **
		//     * Bypass permission checks for sending signals (see kill(2)). This includes use of the ioctl(2) KDSIGACCEPT operation.
		//     * / KILL | / **
		//     * Establish leases on arbitrary files (see fcntl(2)).
		//     * / LEASE | / **
		//     * Set the FS_APPEND_FL and FS_IMMUTABLE_FL i-node flags (see chattr(1)).
		//     * / LINUX_IMMUTABLE | / **
		//     * Override Mandatory Access Control (MAC). Implemented for the Smack Linux Security Module (LSM).
		//     * / MAC_ADMIN | / **
		//     * Allow MAC configuration or state changes. Implemented for the Smack LSM.
		//     * / MAC_OVERRIDE | / **
		//     * Create special files using mknod(2).
		//     * / MKNOD | / **
		//     * Perform various network-related operations:
		//     * <ul>
		//     * <li>Interface configuration.
		//     * <li>Administration of IP firewall, masquerading, and accounting.
		//     * <li>Modify routing tables.
		//     * <li>Bind to any address for transparent proxying.
		//     * <li>Set type-of-service (TOS).
		//     * <li>Clear driver statistics.
		//     * <li>Set promiscuous mode.
		//     * <li>Enabling multicasting.
		//     * <li>Use setsockopt(2) to set the following socket options: SO_DEBUG, SO_MARK, SO_PRIORITY (for a priority outside the range 0 to 6),
		//     * SO_RCVBUFFORCE, and SO_SNDBUFFORCE.
		//     * </ul>
		//     * / NET_ADMIN | / **
		//     * Bind a socket to Internet domain privileged ports (port numbers less than 1024).
		//     * / NET_BIND_SERVICE | / **
		//     * (Unused) Make socket broadcasts, and listen to multicasts.
		//     * / NET_BROADCAST | / **
		//     * <ul>
		//     * <li>Use RAW and PACKET sockets.
		//     * <li>Bind to any address for transparent proxying.
		//     * </ul>
		//     * / NET_RAW | / **
		//     * Set file capabilities.
		//     * / SETFCAP | / **
		//     * <ul>
		//     * <li>Make arbitrary manipulations of process GIDs and supplementary GID list.
		//     * <li>Forge GID when passing socket credentials via UNIX domain sockets.
		//     * </ul>
		//     * / SETGID | / **
		//     * If file capabilities are not supported:
		//     * <ul>
		//     * <li>grant or remove any capability in the caller's permitted capability set to or from any other process. (This property of
		//     * CAP_SETPCAP is not available when the kernel is configured to support file capabilities, since CAP_SETPCAP has entirely different
		//     * semantics for such kernels.)
		//     * </ul>
		//     * <p>
		//     * If file capabilities are supported:
		//     * <ul>
		//     * <li>Add any capability from the calling thread's bounding set to its inheritable set.
		//     * <li>Drop capabilities from the bounding set (via prctl(2) PR_CAPBSET_DROP).
		//     * <li>Make changes to the securebits flags.
		//     * </ul>
		//     * / SETPCAP | / **
		//     * <ul>
		//     * <li>Make arbitrary manipulations of process UIDs (setuid(2), setreuid(2), setresuid(2), setfsuid(2)).
		//     * <li>Make forged UID when passing socket credentials via UNIX domain sockets.
		//     * </ul>
		//     * / SETUID | / **
		//     * <ul>
		//     * <li>Perform a range of system administration operations including: quotactl(2), mount(2), umount(2), swapon(2), swapoff(2),
		//     * sethostname(2), and setdomainname(2).
		//     * <li>Perform privileged syslog(2) operations (since Linux 2.6.37, CAP_SYSLOG should be used to permit such operations).
		//     * <li>Perform VM86_REQUEST_IRQ vm86(2) command.
		//     * <li>Perform IPC_SET and IPC_RMID operations on arbitrary System V IPC objects.
		//     * <li>Perform operations on trusted and security Extended Attributes (see attr(5)).
		//     * <li>Use lookup_dcookie(2)
		//     * <li>Use ioprio_set(2) to assign IOPRIO_CLASS_RT and (before Linux 2.6.25) IOPRIO_CLASS_IDLE I/O scheduling classes.
		//     * <li>Forge UID when passing socket credentials.
		//     * <li>Exceed /proc/sys/fs/file-max, the system-wide limit on the number of open files, in system calls that open files (e.g.,
		//     * accept(2), execve(2), open(2), pipe(2)).
		//     * <li>Employ CLONE_* flags that create new namespaces with clone(2) and unshare(2).
		//     * <li>Call perf_event_open(2).
		//     * <li>Access privileged perf event information.
		//     * <li>Call setns(2).
		//     * <li>Call fanotify_init(2).
		//     * <li>Perform KEYCTL_CHOWN and KEYCTL_SETPERM keyctl(2) operations.
		//     * <li>Perform madvise(2) MADV_HWPOISON operation.
		//     * <li>Employ the TIOCSTI ioctl(2) to insert characters into the input queue of a terminal other than the caller's controlling terminal.
		//     * <li>Employ the obsolete nfsservctl(2) system call.
		//     * <li>Employ the obsolete bdflush(2) system call.
		//     * <li>Perform various privileged block-device ioctl(2) operations.
		//     * <li>Perform various privileged file-system ioctl(2) operations.
		//     * <li>Perform administrative operations on many device drivers.
		//     * </ul>
		//     * / SYS_ADMIN | / **
		//     * Use reboot(2) and kexec_load(2).
		//     * / SYS_BOOT | / **
		//     * Use chroot(2).
		//     * / SYS_CHROOT | / **
		//     * <ul>
		//     * <li>Perform privileged syslog(2) operations. See syslog(2) for information on which operations require privilege.
		//     * <li>View kernel addresses exposed via /proc and other interfaces when /proc/sys/kernel/kptr_restrict has the value 1. (See the
		//     * discussion of the kptr_restrict in proc(5).)
		//     * </ul>
		//     * / SYSLOG | / **
		//     * <ul>
		//     * <li>Load and unload kernel modules (see init_module(2) and delete_module(2))
		//     * <li>In kernels before 2.6.25: drop capabilities from the system-wide capability bounding set.
		//     * </ul>
		//     * / SYS_MODULE | / **
		//     * <ul>
		//     * <li>Raise process nice value (nice(2), setpriority(2)) and change the nice value for arbitrary processes.
		//     * <li>Set real-time scheduling policies for calling process, and set scheduling policies and priorities for arbitrary processes
		//     * (sched_setscheduler(2), sched_setparam(2)).
		//     * <li>Set CPU affinity for arbitrary processes (sched_setaffinity(2)).
		//     * <li>Set I/O scheduling class and priority for arbitrary processes (ioprio_set(2)).
		//     * <li>Apply migrate_pages(2) to arbitrary processes and allow processes to be migrated to arbitrary nodes.
		//     * <li>Apply move_pages(2) to arbitrary processes.
		//     * <li>Use the MPOL_MF_MOVE_ALL flag with mbind(2) and move_pages(2).
		//     * </ul>
		//     * / SYS_NICE | / **
		//     * Use acct(2).
		//     * / SYS_PACCT | / **
		//     * <ul>
		//     * <li>Trace arbitrary processes using ptrace(2).
		//     * <li>Apply get_robust_list(2) to arbitrary processes.
		//     * <li>Inspect processes using kcmp(2).
		//     * </ul>
		//     * / SYS_PTRACE | / **
		//     * <ul>
		//     * <li>Perform I/O port operations (iopl(2) and ioperm(2)).
		//     * <li>Access /proc/kcore.
		//     * <li>Employ the FIBMAP ioctl(2) operation.
		//     * <li>Open devices for accessing x86 model-specific registers (MSRs, see msr(4)).
		//     * <li>Update /proc/sys/vm/mmap_min_addr.
		//     * <li>Create memory mappings at addresses below the value specified by /proc/sys/vm/mmap_min_addr.
		//     * <li>Map files in /proc/pci/bus.
		//     * <li>Open /dev/mem and /dev/kmem.
		//     * <li>Perform various SCSI device commands.
		//     * <li>Perform certain operations on hpsa(4) and cciss(4) devices.
		//     * <li>Perform a range of device-specific operations on other devices.
		//     * </ul>
		//     * / SYS_RAWIO | / **
		//     * <ul>
		//     * <li>Use reserved space on ext2 file systems.
		//     * <li>Make ioctl(2) calls controlling ext3 journaling.
		//     * <li>Override disk quota limits.
		//     * <li>Increase resource limits (see setrlimit(2)).
		//     * <li>Override RLIMIT_NPROC resource limit.
		//     * <li>Override maximum number of consoles on console allocation.
		//     * <li>Override maximum number of keymaps.
		//     * <li>Allow more than 64hz interrupts from the real-time clock.
		//     * <li>Raise msg_qbytes limit for a System V message queue above the limit in /proc/sys/kernel/msgmnb (see msgop(2) and msgctl(2)).
		//     * <li>Override the /proc/sys/fs/pipe-size-max limit when setting the capacity of a pipe using the F_SETPIPE_SZ fcntl(2) command.
		//     * <li>Use F_SETPIPE_SZ to increase the capacity of a pipe above the limit specified by /proc/sys/fs/pipe-max-size.
		//     * <li>Override /proc/sys/fs/mqueue/queues_max limit when creating POSIX message queues (see mq_overview(7)).
		//     * <li>Employ prctl(2) PR_SET_MM operation.
		//     * <li>Set /proc/PID/oom_score_adj to a value lower than the value last set by a process with CAP_SYS_RESOURCE.
		//     * </ul>
		//     * / SYS_RESOURCE | / **
		//     * <ul>
		//     * <li>Set system clock (settimeofday(2), stime(2), adjtimex(2)).
		//     * <li>Set real-time (hardware) clock.
		//     * </ul>
		//     * / SYS_TIME | / **
		//     * <ul>
		//     * <li>Use vhangup(2).
		//     * <li>Employ various privileged ioctl(2) operations on virtual terminals.
		//     * </ul>
		//     * / SYS_TTY_CONFIG | / **
		//     * Trigger something that will wake up the system (set CLOCK_REALTIME_ALARM and CLOCK_BOOTTIME_ALARM timers).
		//     * / WAKE_ALARM
		public Alternatives getAlternatives() { return cAlternatives; }

		/// **
		//     * This meta capability includes all Linux capabilities.
		//     * / ALL
		public EnumLiteralDeclaration getALLEnumLiteralDeclaration_0() { return cALLEnumLiteralDeclaration_0; }

		//"ALL"
		public Keyword getALLALLKeyword_0_0() { return cALLALLKeyword_0_0; }

		/// **
		//     * <ul>
		//     * <li>Enable and disable kernel auditing.
		//     * <li>Change auditing filter rules.
		//     * <li>Retrieve auditing status and filtering rules.
		//     * </ul>
		//     * / AUDIT_CONTROL
		public EnumLiteralDeclaration getAUDIT_CONTROLEnumLiteralDeclaration_1() { return cAUDIT_CONTROLEnumLiteralDeclaration_1; }

		//"AUDIT_CONTROL"
		public Keyword getAUDIT_CONTROLAUDIT_CONTROLKeyword_1_0() { return cAUDIT_CONTROLAUDIT_CONTROLKeyword_1_0; }

		/// **
		//     * Write records to kernel auditing log.
		//     * / AUDIT_WRITE
		public EnumLiteralDeclaration getAUDIT_WRITEEnumLiteralDeclaration_2() { return cAUDIT_WRITEEnumLiteralDeclaration_2; }

		//"AUDIT_WRITE"
		public Keyword getAUDIT_WRITEAUDIT_WRITEKeyword_2_0() { return cAUDIT_WRITEAUDIT_WRITEKeyword_2_0; }

		/// **
		//     * Employ features that can block system suspend.
		//     * / BLOCK_SUSPEND
		public EnumLiteralDeclaration getBLOCK_SUSPENDEnumLiteralDeclaration_3() { return cBLOCK_SUSPENDEnumLiteralDeclaration_3; }

		//"BLOCK_SUSPEND"
		public Keyword getBLOCK_SUSPENDBLOCK_SUSPENDKeyword_3_0() { return cBLOCK_SUSPENDBLOCK_SUSPENDKeyword_3_0; }

		/// **
		//     * Make arbitrary changes to file UIDs and GIDs (see chown(2)).
		//     * / CHOWN
		public EnumLiteralDeclaration getCHOWNEnumLiteralDeclaration_4() { return cCHOWNEnumLiteralDeclaration_4; }

		//"CHOWN"
		public Keyword getCHOWNCHOWNKeyword_4_0() { return cCHOWNCHOWNKeyword_4_0; }

		/// **
		//     * Bypass file read, write, and execute permission checks. (DAC is an abbreviation of "discretionary access control".)
		//     * / DAC_OVERRIDE
		public EnumLiteralDeclaration getDAC_OVERRIDEEnumLiteralDeclaration_5() { return cDAC_OVERRIDEEnumLiteralDeclaration_5; }

		//"DAC_OVERRIDE"
		public Keyword getDAC_OVERRIDEDAC_OVERRIDEKeyword_5_0() { return cDAC_OVERRIDEDAC_OVERRIDEKeyword_5_0; }

		/// **
		//     * Bypass file read permission checks and directory read and execute permission checks.
		//     * / DAC_READ_SEARCH
		public EnumLiteralDeclaration getDAC_READ_SEARCHEnumLiteralDeclaration_6() { return cDAC_READ_SEARCHEnumLiteralDeclaration_6; }

		//"DAC_READ_SEARCH"
		public Keyword getDAC_READ_SEARCHDAC_READ_SEARCHKeyword_6_0() { return cDAC_READ_SEARCHDAC_READ_SEARCHKeyword_6_0; }

		/// **
		//     * <ul>
		//     * <li>Bypass permission checks on operations that normally require the file system UID of the process to match the UID of the file
		//     * (e.g., chmod(2), utime(2)), excluding those operations covered by the {@link #DAC_OVERRIDE} and {@link #DAC_READ_SEARCH}.
		//     * <li>Set extended file attributes (see chattr(1)) on arbitrary files.
		//     * <li>Set Access Control Lists (ACLs) on arbitrary files.
		//     * <li>Ignore directory sticky bit on file deletion.
		//     * <li>Specify O_NOATIME for arbitrary files in open(2)and fcntl(2).
		//     * </ul>
		//     * / FOWNER
		public EnumLiteralDeclaration getFOWNEREnumLiteralDeclaration_7() { return cFOWNEREnumLiteralDeclaration_7; }

		//"FOWNER"
		public Keyword getFOWNERFOWNERKeyword_7_0() { return cFOWNERFOWNERKeyword_7_0; }

		/// **
		//     * <ul>
		//     * <li>Don't clear set-user-ID and set-group-ID permission bits when a file is modified.
		//     * <li>Set the set-group-ID bit for a file whose GID does not match the file system or any of the supplementary GIDs of the calling
		//     * process.
		//     * </ul>
		//     * / FSETID
		public EnumLiteralDeclaration getFSETIDEnumLiteralDeclaration_8() { return cFSETIDEnumLiteralDeclaration_8; }

		//"FSETID"
		public Keyword getFSETIDFSETIDKeyword_8_0() { return cFSETIDFSETIDKeyword_8_0; }

		/// **
		//     * Permit memory locking (mlock(2), mlockall(2), mmap(2), shmctl(2)).
		//     * / IPC_LOCK
		public EnumLiteralDeclaration getIPC_LOCKEnumLiteralDeclaration_9() { return cIPC_LOCKEnumLiteralDeclaration_9; }

		//"IPC_LOCK"
		public Keyword getIPC_LOCKIPC_LOCKKeyword_9_0() { return cIPC_LOCKIPC_LOCKKeyword_9_0; }

		/// **
		//     * Bypass permission checks for operations on System V IPC objects.
		//     * / IPC_OWNER
		public EnumLiteralDeclaration getIPC_OWNEREnumLiteralDeclaration_10() { return cIPC_OWNEREnumLiteralDeclaration_10; }

		//"IPC_OWNER"
		public Keyword getIPC_OWNERIPC_OWNERKeyword_10_0() { return cIPC_OWNERIPC_OWNERKeyword_10_0; }

		/// **
		//     * Bypass permission checks for sending signals (see kill(2)). This includes use of the ioctl(2) KDSIGACCEPT operation.
		//     * / KILL
		public EnumLiteralDeclaration getKILLEnumLiteralDeclaration_11() { return cKILLEnumLiteralDeclaration_11; }

		//"KILL"
		public Keyword getKILLKILLKeyword_11_0() { return cKILLKILLKeyword_11_0; }

		/// **
		//     * Establish leases on arbitrary files (see fcntl(2)).
		//     * / LEASE
		public EnumLiteralDeclaration getLEASEEnumLiteralDeclaration_12() { return cLEASEEnumLiteralDeclaration_12; }

		//"LEASE"
		public Keyword getLEASELEASEKeyword_12_0() { return cLEASELEASEKeyword_12_0; }

		/// **
		//     * Set the FS_APPEND_FL and FS_IMMUTABLE_FL i-node flags (see chattr(1)).
		//     * / LINUX_IMMUTABLE
		public EnumLiteralDeclaration getLINUX_IMMUTABLEEnumLiteralDeclaration_13() { return cLINUX_IMMUTABLEEnumLiteralDeclaration_13; }

		//"LINUX_IMMUTABLE"
		public Keyword getLINUX_IMMUTABLELINUX_IMMUTABLEKeyword_13_0() { return cLINUX_IMMUTABLELINUX_IMMUTABLEKeyword_13_0; }

		/// **
		//     * Override Mandatory Access Control (MAC). Implemented for the Smack Linux Security Module (LSM).
		//     * / MAC_ADMIN
		public EnumLiteralDeclaration getMAC_ADMINEnumLiteralDeclaration_14() { return cMAC_ADMINEnumLiteralDeclaration_14; }

		//"MAC_ADMIN"
		public Keyword getMAC_ADMINMAC_ADMINKeyword_14_0() { return cMAC_ADMINMAC_ADMINKeyword_14_0; }

		/// **
		//     * Allow MAC configuration or state changes. Implemented for the Smack LSM.
		//     * / MAC_OVERRIDE
		public EnumLiteralDeclaration getMAC_OVERRIDEEnumLiteralDeclaration_15() { return cMAC_OVERRIDEEnumLiteralDeclaration_15; }

		//"MAC_OVERRIDE"
		public Keyword getMAC_OVERRIDEMAC_OVERRIDEKeyword_15_0() { return cMAC_OVERRIDEMAC_OVERRIDEKeyword_15_0; }

		/// **
		//     * Create special files using mknod(2).
		//     * / MKNOD
		public EnumLiteralDeclaration getMKNODEnumLiteralDeclaration_16() { return cMKNODEnumLiteralDeclaration_16; }

		//"MKNOD"
		public Keyword getMKNODMKNODKeyword_16_0() { return cMKNODMKNODKeyword_16_0; }

		/// **
		//     * Perform various network-related operations:
		//     * <ul>
		//     * <li>Interface configuration.
		//     * <li>Administration of IP firewall, masquerading, and accounting.
		//     * <li>Modify routing tables.
		//     * <li>Bind to any address for transparent proxying.
		//     * <li>Set type-of-service (TOS).
		//     * <li>Clear driver statistics.
		//     * <li>Set promiscuous mode.
		//     * <li>Enabling multicasting.
		//     * <li>Use setsockopt(2) to set the following socket options: SO_DEBUG, SO_MARK, SO_PRIORITY (for a priority outside the range 0 to 6),
		//     * SO_RCVBUFFORCE, and SO_SNDBUFFORCE.
		//     * </ul>
		//     * / NET_ADMIN
		public EnumLiteralDeclaration getNET_ADMINEnumLiteralDeclaration_17() { return cNET_ADMINEnumLiteralDeclaration_17; }

		//"NET_ADMIN"
		public Keyword getNET_ADMINNET_ADMINKeyword_17_0() { return cNET_ADMINNET_ADMINKeyword_17_0; }

		/// **
		//     * Bind a socket to Internet domain privileged ports (port numbers less than 1024).
		//     * / NET_BIND_SERVICE
		public EnumLiteralDeclaration getNET_BIND_SERVICEEnumLiteralDeclaration_18() { return cNET_BIND_SERVICEEnumLiteralDeclaration_18; }

		//"NET_BIND_SERVICE"
		public Keyword getNET_BIND_SERVICENET_BIND_SERVICEKeyword_18_0() { return cNET_BIND_SERVICENET_BIND_SERVICEKeyword_18_0; }

		/// **
		//     * (Unused) Make socket broadcasts, and listen to multicasts.
		//     * / NET_BROADCAST
		public EnumLiteralDeclaration getNET_BROADCASTEnumLiteralDeclaration_19() { return cNET_BROADCASTEnumLiteralDeclaration_19; }

		//"NET_BROADCAST"
		public Keyword getNET_BROADCASTNET_BROADCASTKeyword_19_0() { return cNET_BROADCASTNET_BROADCASTKeyword_19_0; }

		/// **
		//     * <ul>
		//     * <li>Use RAW and PACKET sockets.
		//     * <li>Bind to any address for transparent proxying.
		//     * </ul>
		//     * / NET_RAW
		public EnumLiteralDeclaration getNET_RAWEnumLiteralDeclaration_20() { return cNET_RAWEnumLiteralDeclaration_20; }

		//"NET_RAW"
		public Keyword getNET_RAWNET_RAWKeyword_20_0() { return cNET_RAWNET_RAWKeyword_20_0; }

		/// **
		//     * Set file capabilities.
		//     * / SETFCAP
		public EnumLiteralDeclaration getSETFCAPEnumLiteralDeclaration_21() { return cSETFCAPEnumLiteralDeclaration_21; }

		//"SETFCAP"
		public Keyword getSETFCAPSETFCAPKeyword_21_0() { return cSETFCAPSETFCAPKeyword_21_0; }

		/// **
		//     * <ul>
		//     * <li>Make arbitrary manipulations of process GIDs and supplementary GID list.
		//     * <li>Forge GID when passing socket credentials via UNIX domain sockets.
		//     * </ul>
		//     * / SETGID
		public EnumLiteralDeclaration getSETGIDEnumLiteralDeclaration_22() { return cSETGIDEnumLiteralDeclaration_22; }

		//"SETGID"
		public Keyword getSETGIDSETGIDKeyword_22_0() { return cSETGIDSETGIDKeyword_22_0; }

		/// **
		//     * If file capabilities are not supported:
		//     * <ul>
		//     * <li>grant or remove any capability in the caller's permitted capability set to or from any other process. (This property of
		//     * CAP_SETPCAP is not available when the kernel is configured to support file capabilities, since CAP_SETPCAP has entirely different
		//     * semantics for such kernels.)
		//     * </ul>
		//     * <p>
		//     * If file capabilities are supported:
		//     * <ul>
		//     * <li>Add any capability from the calling thread's bounding set to its inheritable set.
		//     * <li>Drop capabilities from the bounding set (via prctl(2) PR_CAPBSET_DROP).
		//     * <li>Make changes to the securebits flags.
		//     * </ul>
		//     * / SETPCAP
		public EnumLiteralDeclaration getSETPCAPEnumLiteralDeclaration_23() { return cSETPCAPEnumLiteralDeclaration_23; }

		//"SETPCAP"
		public Keyword getSETPCAPSETPCAPKeyword_23_0() { return cSETPCAPSETPCAPKeyword_23_0; }

		/// **
		//     * <ul>
		//     * <li>Make arbitrary manipulations of process UIDs (setuid(2), setreuid(2), setresuid(2), setfsuid(2)).
		//     * <li>Make forged UID when passing socket credentials via UNIX domain sockets.
		//     * </ul>
		//     * / SETUID
		public EnumLiteralDeclaration getSETUIDEnumLiteralDeclaration_24() { return cSETUIDEnumLiteralDeclaration_24; }

		//"SETUID"
		public Keyword getSETUIDSETUIDKeyword_24_0() { return cSETUIDSETUIDKeyword_24_0; }

		/// **
		//     * <ul>
		//     * <li>Perform a range of system administration operations including: quotactl(2), mount(2), umount(2), swapon(2), swapoff(2),
		//     * sethostname(2), and setdomainname(2).
		//     * <li>Perform privileged syslog(2) operations (since Linux 2.6.37, CAP_SYSLOG should be used to permit such operations).
		//     * <li>Perform VM86_REQUEST_IRQ vm86(2) command.
		//     * <li>Perform IPC_SET and IPC_RMID operations on arbitrary System V IPC objects.
		//     * <li>Perform operations on trusted and security Extended Attributes (see attr(5)).
		//     * <li>Use lookup_dcookie(2)
		//     * <li>Use ioprio_set(2) to assign IOPRIO_CLASS_RT and (before Linux 2.6.25) IOPRIO_CLASS_IDLE I/O scheduling classes.
		//     * <li>Forge UID when passing socket credentials.
		//     * <li>Exceed /proc/sys/fs/file-max, the system-wide limit on the number of open files, in system calls that open files (e.g.,
		//     * accept(2), execve(2), open(2), pipe(2)).
		//     * <li>Employ CLONE_* flags that create new namespaces with clone(2) and unshare(2).
		//     * <li>Call perf_event_open(2).
		//     * <li>Access privileged perf event information.
		//     * <li>Call setns(2).
		//     * <li>Call fanotify_init(2).
		//     * <li>Perform KEYCTL_CHOWN and KEYCTL_SETPERM keyctl(2) operations.
		//     * <li>Perform madvise(2) MADV_HWPOISON operation.
		//     * <li>Employ the TIOCSTI ioctl(2) to insert characters into the input queue of a terminal other than the caller's controlling terminal.
		//     * <li>Employ the obsolete nfsservctl(2) system call.
		//     * <li>Employ the obsolete bdflush(2) system call.
		//     * <li>Perform various privileged block-device ioctl(2) operations.
		//     * <li>Perform various privileged file-system ioctl(2) operations.
		//     * <li>Perform administrative operations on many device drivers.
		//     * </ul>
		//     * / SYS_ADMIN
		public EnumLiteralDeclaration getSYS_ADMINEnumLiteralDeclaration_25() { return cSYS_ADMINEnumLiteralDeclaration_25; }

		//"SYS_ADMIN"
		public Keyword getSYS_ADMINSYS_ADMINKeyword_25_0() { return cSYS_ADMINSYS_ADMINKeyword_25_0; }

		/// **
		//     * Use reboot(2) and kexec_load(2).
		//     * / SYS_BOOT
		public EnumLiteralDeclaration getSYS_BOOTEnumLiteralDeclaration_26() { return cSYS_BOOTEnumLiteralDeclaration_26; }

		//"SYS_BOOT"
		public Keyword getSYS_BOOTSYS_BOOTKeyword_26_0() { return cSYS_BOOTSYS_BOOTKeyword_26_0; }

		/// **
		//     * Use chroot(2).
		//     * / SYS_CHROOT
		public EnumLiteralDeclaration getSYS_CHROOTEnumLiteralDeclaration_27() { return cSYS_CHROOTEnumLiteralDeclaration_27; }

		//"SYS_CHROOT"
		public Keyword getSYS_CHROOTSYS_CHROOTKeyword_27_0() { return cSYS_CHROOTSYS_CHROOTKeyword_27_0; }

		/// **
		//     * <ul>
		//     * <li>Perform privileged syslog(2) operations. See syslog(2) for information on which operations require privilege.
		//     * <li>View kernel addresses exposed via /proc and other interfaces when /proc/sys/kernel/kptr_restrict has the value 1. (See the
		//     * discussion of the kptr_restrict in proc(5).)
		//     * </ul>
		//     * / SYSLOG
		public EnumLiteralDeclaration getSYSLOGEnumLiteralDeclaration_28() { return cSYSLOGEnumLiteralDeclaration_28; }

		//"SYSLOG"
		public Keyword getSYSLOGSYSLOGKeyword_28_0() { return cSYSLOGSYSLOGKeyword_28_0; }

		/// **
		//     * <ul>
		//     * <li>Load and unload kernel modules (see init_module(2) and delete_module(2))
		//     * <li>In kernels before 2.6.25: drop capabilities from the system-wide capability bounding set.
		//     * </ul>
		//     * / SYS_MODULE
		public EnumLiteralDeclaration getSYS_MODULEEnumLiteralDeclaration_29() { return cSYS_MODULEEnumLiteralDeclaration_29; }

		//"SYS_MODULE"
		public Keyword getSYS_MODULESYS_MODULEKeyword_29_0() { return cSYS_MODULESYS_MODULEKeyword_29_0; }

		/// **
		//     * <ul>
		//     * <li>Raise process nice value (nice(2), setpriority(2)) and change the nice value for arbitrary processes.
		//     * <li>Set real-time scheduling policies for calling process, and set scheduling policies and priorities for arbitrary processes
		//     * (sched_setscheduler(2), sched_setparam(2)).
		//     * <li>Set CPU affinity for arbitrary processes (sched_setaffinity(2)).
		//     * <li>Set I/O scheduling class and priority for arbitrary processes (ioprio_set(2)).
		//     * <li>Apply migrate_pages(2) to arbitrary processes and allow processes to be migrated to arbitrary nodes.
		//     * <li>Apply move_pages(2) to arbitrary processes.
		//     * <li>Use the MPOL_MF_MOVE_ALL flag with mbind(2) and move_pages(2).
		//     * </ul>
		//     * / SYS_NICE
		public EnumLiteralDeclaration getSYS_NICEEnumLiteralDeclaration_30() { return cSYS_NICEEnumLiteralDeclaration_30; }

		//"SYS_NICE"
		public Keyword getSYS_NICESYS_NICEKeyword_30_0() { return cSYS_NICESYS_NICEKeyword_30_0; }

		/// **
		//     * Use acct(2).
		//     * / SYS_PACCT
		public EnumLiteralDeclaration getSYS_PACCTEnumLiteralDeclaration_31() { return cSYS_PACCTEnumLiteralDeclaration_31; }

		//"SYS_PACCT"
		public Keyword getSYS_PACCTSYS_PACCTKeyword_31_0() { return cSYS_PACCTSYS_PACCTKeyword_31_0; }

		/// **
		//     * <ul>
		//     * <li>Trace arbitrary processes using ptrace(2).
		//     * <li>Apply get_robust_list(2) to arbitrary processes.
		//     * <li>Inspect processes using kcmp(2).
		//     * </ul>
		//     * / SYS_PTRACE
		public EnumLiteralDeclaration getSYS_PTRACEEnumLiteralDeclaration_32() { return cSYS_PTRACEEnumLiteralDeclaration_32; }

		//"SYS_PTRACE"
		public Keyword getSYS_PTRACESYS_PTRACEKeyword_32_0() { return cSYS_PTRACESYS_PTRACEKeyword_32_0; }

		/// **
		//     * <ul>
		//     * <li>Perform I/O port operations (iopl(2) and ioperm(2)).
		//     * <li>Access /proc/kcore.
		//     * <li>Employ the FIBMAP ioctl(2) operation.
		//     * <li>Open devices for accessing x86 model-specific registers (MSRs, see msr(4)).
		//     * <li>Update /proc/sys/vm/mmap_min_addr.
		//     * <li>Create memory mappings at addresses below the value specified by /proc/sys/vm/mmap_min_addr.
		//     * <li>Map files in /proc/pci/bus.
		//     * <li>Open /dev/mem and /dev/kmem.
		//     * <li>Perform various SCSI device commands.
		//     * <li>Perform certain operations on hpsa(4) and cciss(4) devices.
		//     * <li>Perform a range of device-specific operations on other devices.
		//     * </ul>
		//     * / SYS_RAWIO
		public EnumLiteralDeclaration getSYS_RAWIOEnumLiteralDeclaration_33() { return cSYS_RAWIOEnumLiteralDeclaration_33; }

		//"SYS_RAWIO"
		public Keyword getSYS_RAWIOSYS_RAWIOKeyword_33_0() { return cSYS_RAWIOSYS_RAWIOKeyword_33_0; }

		/// **
		//     * <ul>
		//     * <li>Use reserved space on ext2 file systems.
		//     * <li>Make ioctl(2) calls controlling ext3 journaling.
		//     * <li>Override disk quota limits.
		//     * <li>Increase resource limits (see setrlimit(2)).
		//     * <li>Override RLIMIT_NPROC resource limit.
		//     * <li>Override maximum number of consoles on console allocation.
		//     * <li>Override maximum number of keymaps.
		//     * <li>Allow more than 64hz interrupts from the real-time clock.
		//     * <li>Raise msg_qbytes limit for a System V message queue above the limit in /proc/sys/kernel/msgmnb (see msgop(2) and msgctl(2)).
		//     * <li>Override the /proc/sys/fs/pipe-size-max limit when setting the capacity of a pipe using the F_SETPIPE_SZ fcntl(2) command.
		//     * <li>Use F_SETPIPE_SZ to increase the capacity of a pipe above the limit specified by /proc/sys/fs/pipe-max-size.
		//     * <li>Override /proc/sys/fs/mqueue/queues_max limit when creating POSIX message queues (see mq_overview(7)).
		//     * <li>Employ prctl(2) PR_SET_MM operation.
		//     * <li>Set /proc/PID/oom_score_adj to a value lower than the value last set by a process with CAP_SYS_RESOURCE.
		//     * </ul>
		//     * / SYS_RESOURCE
		public EnumLiteralDeclaration getSYS_RESOURCEEnumLiteralDeclaration_34() { return cSYS_RESOURCEEnumLiteralDeclaration_34; }

		//"SYS_RESOURCE"
		public Keyword getSYS_RESOURCESYS_RESOURCEKeyword_34_0() { return cSYS_RESOURCESYS_RESOURCEKeyword_34_0; }

		/// **
		//     * <ul>
		//     * <li>Set system clock (settimeofday(2), stime(2), adjtimex(2)).
		//     * <li>Set real-time (hardware) clock.
		//     * </ul>
		//     * / SYS_TIME
		public EnumLiteralDeclaration getSYS_TIMEEnumLiteralDeclaration_35() { return cSYS_TIMEEnumLiteralDeclaration_35; }

		//"SYS_TIME"
		public Keyword getSYS_TIMESYS_TIMEKeyword_35_0() { return cSYS_TIMESYS_TIMEKeyword_35_0; }

		/// **
		//     * <ul>
		//     * <li>Use vhangup(2).
		//     * <li>Employ various privileged ioctl(2) operations on virtual terminals.
		//     * </ul>
		//     * / SYS_TTY_CONFIG
		public EnumLiteralDeclaration getSYS_TTY_CONFIGEnumLiteralDeclaration_36() { return cSYS_TTY_CONFIGEnumLiteralDeclaration_36; }

		//"SYS_TTY_CONFIG"
		public Keyword getSYS_TTY_CONFIGSYS_TTY_CONFIGKeyword_36_0() { return cSYS_TTY_CONFIGSYS_TTY_CONFIGKeyword_36_0; }

		/// **
		//     * Trigger something that will wake up the system (set CLOCK_REALTIME_ALARM and CLOCK_BOOTTIME_ALARM timers).
		//     * / WAKE_ALARM
		public EnumLiteralDeclaration getWAKE_ALARMEnumLiteralDeclaration_37() { return cWAKE_ALARMEnumLiteralDeclaration_37; }

		//"WAKE_ALARM"
		public Keyword getWAKE_ALARMWAKE_ALARMKeyword_37_0() { return cWAKE_ALARMWAKE_ALARMKeyword_37_0; }
	}
	
	private final DockerElements pDocker;
	private final ImageElements pImage;
	private final BuildArgsElements pBuildArgs;
	private final EBooleanElements pEBoolean;
	private final ElongElements pElong;
	private final ContainerElements pContainer;
	private final VolumesFromElements pVolumesFrom;
	private final RestartPolicyElements pRestartPolicy;
	private final PortBindingElements pPortBinding;
	private final BindingElements pBinding;
	private final LinkElements pLink;
	private final UlimitElements pUlimit;
	private final LabelElements pLabel;
	private final ExposedPortElements pExposedPort;
	private final InternalProtocolElements eInternalProtocol;
	private final DeviceElements pDevice;
	private final AccessModeElements eAccessMode;
	private final CapabilityElements eCapability;
	private final BindElements pBind;
	private final VolumeElements pVolume;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ContainerGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDocker = new DockerElements();
		this.pImage = new ImageElements();
		this.pBuildArgs = new BuildArgsElements();
		this.pEBoolean = new EBooleanElements();
		this.pElong = new ElongElements();
		this.pContainer = new ContainerElements();
		this.pVolumesFrom = new VolumesFromElements();
		this.pRestartPolicy = new RestartPolicyElements();
		this.pPortBinding = new PortBindingElements();
		this.pBinding = new BindingElements();
		this.pLink = new LinkElements();
		this.pUlimit = new UlimitElements();
		this.pLabel = new LabelElements();
		this.pExposedPort = new ExposedPortElements();
		this.eInternalProtocol = new InternalProtocolElements();
		this.pDevice = new DeviceElements();
		this.eAccessMode = new AccessModeElements();
		this.eCapability = new CapabilityElements();
		this.pBind = new BindElements();
		this.pVolume = new VolumeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.docker.language.Container".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Docker:
	//	(containers+=Container | images+=Image)*;
	public DockerElements getDockerAccess() {
		return pDocker;
	}
	
	public ParserRule getDockerRule() {
		return getDockerAccess().getRule();
	}

	//Image:
	//	'image' name=STRING '{' (('tag' tag=STRING)? & ('dockerFileDir' dockerFileDir=STRING)? & ('buildArg'
	//	buildargs=BuildArgs+)? & ('noCache' noCache=EBoolean)? & ('memory' memory=Elong)? & ('memswap' memswap=Elong)? &
	//	('cpusetcpus' cpusetcpus=STRING)? & ('cpushares' cpushares=STRING)? & ('remove' remove=EBoolean)? & ('quiet'
	//	quiet=EBoolean)? & ('pull' pull=EBoolean)?)
	//	'}';
	public ImageElements getImageAccess() {
		return pImage;
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}

	//BuildArgs:
	//	'-' key=STRING value=STRING;
	public BuildArgsElements getBuildArgsAccess() {
		return pBuildArgs;
	}
	
	public ParserRule getBuildArgsRule() {
		return getBuildArgsAccess().getRule();
	}

	//EBoolean ecore::EBoolean:
	//	'false' | 'true'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//Elong ecore::ELong:
	//	INT
	public ElongElements getElongAccess() {
		return pElong;
	}
	
	public ParserRule getElongRule() {
		return getElongAccess().getRule();
	}

	////Network:
	// //	'network' name=ID '{'  '}'
	// //;
	// //
	// //Volume:
	// //	'volume'  name=ID '{'  '}'
	// //;
	// Container:
	//	'container' name=ID '{'
	//	'image' image=[Image] (('binds' '{' binds+=Bind+ '}')? & ('capabilityAdd' '{' capabilityAdd+=Capability+ '}')? &
	//	('capabilityDrop' '{' capabilityDrop+=Capability+ '}')? & ('commands' '{' commands+=STRING+ '}')? &
	//	('containerIDFile' containerIDFile=STRING)? & ('cpuPeriod' cpuPeriod=INT)? & ('cpusetCpus' cpusetCpus=INT)? &
	//	('cpusetMems' cpusetMems=STRING)? & ('cpuShares' cpuShares=INT)? & ('devices' '{' devices+=Device+ '}')? & ('dns'
	//	dns+=STRING+ '}')? & ('dnsSearch' '{' dnsSearch+=STRING+ '}')? & ('domainName' domainName=STRING)? & ('entrypoint'
	//	'{' entrypoint+=STRING+ '}')? & ('env' '{' env+=STRING+ '}')? & ('exposedPorts' '{' exposedPorts+=ExposedPort+ '}')?
	//	& ('extraHosts' '{' extraHosts+=STRING+ '}')? & ('labels' '{' labels+=Label+ '}')? & ('links' '{' links+=Link+ '}')?
	//	& ('macAddress' macAddress=STRING)? & ('memory' memory=Elong)? & ('memorySwap' memorySwap=Elong)? & ('disableNetwork'
	//	disableNetwork=EBoolean)? & ('networkMode' networkMode=STRING)? & ('portBindings' '{' portBindings+=PortBinding+
	//	'}')? & ('privileged' privileged=EBoolean)? & ('publishAllPorts' publishAllPorts=EBoolean)? & ('readonlyRootfs'
	//	readonlyRootfs=EBoolean)? & ('pidMode' pidMode=STRING)? & ('cgroupParent' cgroupParent=STRING)? & ('workingDir'
	//	workingDir=STRING)? & ('user' user=STRING)? & ('tty' tty=EBoolean)? & ('restartPolicy' restartPolicy=RestartPolicy)?
	//	& ('volumes' '{' ('-' volumes+=Volume)+ '}')? & ('volumesFrom' '{' ('-' volumesFrom+=VolumesFrom)+ '}')? & ('ulimits'
	//	'{' ('-' ulimits+=Ulimit)+ '}')?)
	//	'}';
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}

	//VolumesFrom:
	//	'-' container=[Container] accessMode=AccessMode;
	public VolumesFromElements getVolumesFromAccess() {
		return pVolumesFrom;
	}
	
	public ParserRule getVolumesFromRule() {
		return getVolumesFromAccess().getRule();
	}

	//RestartPolicy:
	//	'-' name=STRING
	//	maximumRetryCount=INT;
	public RestartPolicyElements getRestartPolicyAccess() {
		return pRestartPolicy;
	}
	
	public ParserRule getRestartPolicyRule() {
		return getRestartPolicyAccess().getRule();
	}

	//PortBinding:
	//	'-' binding=Binding
	//	exposedPort=[ExposedPort|STRING];
	public PortBindingElements getPortBindingAccess() {
		return pPortBinding;
	}
	
	public ParserRule getPortBindingRule() {
		return getPortBindingAccess().getRule();
	}

	//Binding:
	//	'-' hostIP=STRING ':' hostPort=INT;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//Link:
	//	'-' containerLink=[Container] ':' alias=STRING;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//Ulimit:
	//	'-'
	//	name=STRING
	//	soft=INT
	//	hard=INT;
	public UlimitElements getUlimitAccess() {
		return pUlimit;
	}
	
	public ParserRule getUlimitRule() {
		return getUlimitAccess().getRule();
	}

	//Label:
	//	key=STRING value=STRING;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//ExposedPort:
	//	'-'
	//	port=STRING '/' protocol=InternalProtocol;
	public ExposedPortElements getExposedPortAccess() {
		return pExposedPort;
	}
	
	public ParserRule getExposedPortRule() {
		return getExposedPortAccess().getRule();
	}

	//enum InternalProtocol:
	//	TCP | UDP;
	public InternalProtocolElements getInternalProtocolAccess() {
		return eInternalProtocol;
	}
	
	public EnumRule getInternalProtocolRule() {
		return getInternalProtocolAccess().getRule();
	}

	//Device:
	//	'-' cGroupPermissions=STRING
	//	pathOnHost=STRING
	//	pathInContainer=STRING;
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}

	//enum AccessMode:
	//	rw | ro;
	public AccessModeElements getAccessModeAccess() {
		return eAccessMode;
	}
	
	public EnumRule getAccessModeRule() {
		return getAccessModeAccess().getRule();
	}

	//enum Capability: / **
	//     * This meta capability includes all Linux capabilities.
	//     * / ALL | / **
	//     * <ul>
	//     * <li>Enable and disable kernel auditing.
	//     * <li>Change auditing filter rules.
	//     * <li>Retrieve auditing status and filtering rules.
	//     * </ul>
	//     * / AUDIT_CONTROL | / **
	//     * Write records to kernel auditing log.
	//     * / AUDIT_WRITE | / **
	//     * Employ features that can block system suspend.
	//     * / BLOCK_SUSPEND | / **
	//     * Make arbitrary changes to file UIDs and GIDs (see chown(2)).
	//     * / CHOWN | / **
	//     * Bypass file read, write, and execute permission checks. (DAC is an abbreviation of "discretionary access control".)
	//     * / DAC_OVERRIDE | / **
	//     * Bypass file read permission checks and directory read and execute permission checks.
	//     * / DAC_READ_SEARCH | / **
	//     * <ul>
	//     * <li>Bypass permission checks on operations that normally require the file system UID of the process to match the UID of the file
	//     * (e.g., chmod(2), utime(2)), excluding those operations covered by the {@link #DAC_OVERRIDE} and {@link #DAC_READ_SEARCH}.
	//     * <li>Set extended file attributes (see chattr(1)) on arbitrary files.
	//     * <li>Set Access Control Lists (ACLs) on arbitrary files.
	//     * <li>Ignore directory sticky bit on file deletion.
	//     * <li>Specify O_NOATIME for arbitrary files in open(2)and fcntl(2).
	//     * </ul>
	//     * / FOWNER | / **
	//     * <ul>
	//     * <li>Don't clear set-user-ID and set-group-ID permission bits when a file is modified.
	//     * <li>Set the set-group-ID bit for a file whose GID does not match the file system or any of the supplementary GIDs of the calling
	//     * process.
	//     * </ul>
	//     * / FSETID | / **
	//     * Permit memory locking (mlock(2), mlockall(2), mmap(2), shmctl(2)).
	//     * / IPC_LOCK | / **
	//     * Bypass permission checks for operations on System V IPC objects.
	//     * / IPC_OWNER | / **
	//     * Bypass permission checks for sending signals (see kill(2)). This includes use of the ioctl(2) KDSIGACCEPT operation.
	//     * / KILL | / **
	//     * Establish leases on arbitrary files (see fcntl(2)).
	//     * / LEASE | / **
	//     * Set the FS_APPEND_FL and FS_IMMUTABLE_FL i-node flags (see chattr(1)).
	//     * / LINUX_IMMUTABLE | / **
	//     * Override Mandatory Access Control (MAC). Implemented for the Smack Linux Security Module (LSM).
	//     * / MAC_ADMIN | / **
	//     * Allow MAC configuration or state changes. Implemented for the Smack LSM.
	//     * / MAC_OVERRIDE | / **
	//     * Create special files using mknod(2).
	//     * / MKNOD | / **
	//     * Perform various network-related operations:
	//     * <ul>
	//     * <li>Interface configuration.
	//     * <li>Administration of IP firewall, masquerading, and accounting.
	//     * <li>Modify routing tables.
	//     * <li>Bind to any address for transparent proxying.
	//     * <li>Set type-of-service (TOS).
	//     * <li>Clear driver statistics.
	//     * <li>Set promiscuous mode.
	//     * <li>Enabling multicasting.
	//     * <li>Use setsockopt(2) to set the following socket options: SO_DEBUG, SO_MARK, SO_PRIORITY (for a priority outside the range 0 to 6),
	//     * SO_RCVBUFFORCE, and SO_SNDBUFFORCE.
	//     * </ul>
	//     * / NET_ADMIN | / **
	//     * Bind a socket to Internet domain privileged ports (port numbers less than 1024).
	//     * / NET_BIND_SERVICE | / **
	//     * (Unused) Make socket broadcasts, and listen to multicasts.
	//     * / NET_BROADCAST | / **
	//     * <ul>
	//     * <li>Use RAW and PACKET sockets.
	//     * <li>Bind to any address for transparent proxying.
	//     * </ul>
	//     * / NET_RAW | / **
	//     * Set file capabilities.
	//     * / SETFCAP | / **
	//     * <ul>
	//     * <li>Make arbitrary manipulations of process GIDs and supplementary GID list.
	//     * <li>Forge GID when passing socket credentials via UNIX domain sockets.
	//     * </ul>
	//     * / SETGID | / **
	//     * If file capabilities are not supported:
	//     * <ul>
	//     * <li>grant or remove any capability in the caller's permitted capability set to or from any other process. (This property of
	//     * CAP_SETPCAP is not available when the kernel is configured to support file capabilities, since CAP_SETPCAP has entirely different
	//     * semantics for such kernels.)
	//     * </ul>
	//     * <p>
	//     * If file capabilities are supported:
	//     * <ul>
	//     * <li>Add any capability from the calling thread's bounding set to its inheritable set.
	//     * <li>Drop capabilities from the bounding set (via prctl(2) PR_CAPBSET_DROP).
	//     * <li>Make changes to the securebits flags.
	//     * </ul>
	//     * / SETPCAP | / **
	//     * <ul>
	//     * <li>Make arbitrary manipulations of process UIDs (setuid(2), setreuid(2), setresuid(2), setfsuid(2)).
	//     * <li>Make forged UID when passing socket credentials via UNIX domain sockets.
	//     * </ul>
	//     * / SETUID | / **
	//     * <ul>
	//     * <li>Perform a range of system administration operations including: quotactl(2), mount(2), umount(2), swapon(2), swapoff(2),
	//     * sethostname(2), and setdomainname(2).
	//     * <li>Perform privileged syslog(2) operations (since Linux 2.6.37, CAP_SYSLOG should be used to permit such operations).
	//     * <li>Perform VM86_REQUEST_IRQ vm86(2) command.
	//     * <li>Perform IPC_SET and IPC_RMID operations on arbitrary System V IPC objects.
	//     * <li>Perform operations on trusted and security Extended Attributes (see attr(5)).
	//     * <li>Use lookup_dcookie(2)
	//     * <li>Use ioprio_set(2) to assign IOPRIO_CLASS_RT and (before Linux 2.6.25) IOPRIO_CLASS_IDLE I/O scheduling classes.
	//     * <li>Forge UID when passing socket credentials.
	//     * <li>Exceed /proc/sys/fs/file-max, the system-wide limit on the number of open files, in system calls that open files (e.g.,
	//     * accept(2), execve(2), open(2), pipe(2)).
	//     * <li>Employ CLONE_* flags that create new namespaces with clone(2) and unshare(2).
	//     * <li>Call perf_event_open(2).
	//     * <li>Access privileged perf event information.
	//     * <li>Call setns(2).
	//     * <li>Call fanotify_init(2).
	//     * <li>Perform KEYCTL_CHOWN and KEYCTL_SETPERM keyctl(2) operations.
	//     * <li>Perform madvise(2) MADV_HWPOISON operation.
	//     * <li>Employ the TIOCSTI ioctl(2) to insert characters into the input queue of a terminal other than the caller's controlling terminal.
	//     * <li>Employ the obsolete nfsservctl(2) system call.
	//     * <li>Employ the obsolete bdflush(2) system call.
	//     * <li>Perform various privileged block-device ioctl(2) operations.
	//     * <li>Perform various privileged file-system ioctl(2) operations.
	//     * <li>Perform administrative operations on many device drivers.
	//     * </ul>
	//     * / SYS_ADMIN | / **
	//     * Use reboot(2) and kexec_load(2).
	//     * / SYS_BOOT | / **
	//     * Use chroot(2).
	//     * / SYS_CHROOT | / **
	//     * <ul>
	//     * <li>Perform privileged syslog(2) operations. See syslog(2) for information on which operations require privilege.
	//     * <li>View kernel addresses exposed via /proc and other interfaces when /proc/sys/kernel/kptr_restrict has the value 1. (See the
	//     * discussion of the kptr_restrict in proc(5).)
	//     * </ul>
	//     * / SYSLOG | / **
	//     * <ul>
	//     * <li>Load and unload kernel modules (see init_module(2) and delete_module(2))
	//     * <li>In kernels before 2.6.25: drop capabilities from the system-wide capability bounding set.
	//     * </ul>
	//     * / SYS_MODULE | / **
	//     * <ul>
	//     * <li>Raise process nice value (nice(2), setpriority(2)) and change the nice value for arbitrary processes.
	//     * <li>Set real-time scheduling policies for calling process, and set scheduling policies and priorities for arbitrary processes
	//     * (sched_setscheduler(2), sched_setparam(2)).
	//     * <li>Set CPU affinity for arbitrary processes (sched_setaffinity(2)).
	//     * <li>Set I/O scheduling class and priority for arbitrary processes (ioprio_set(2)).
	//     * <li>Apply migrate_pages(2) to arbitrary processes and allow processes to be migrated to arbitrary nodes.
	//     * <li>Apply move_pages(2) to arbitrary processes.
	//     * <li>Use the MPOL_MF_MOVE_ALL flag with mbind(2) and move_pages(2).
	//     * </ul>
	//     * / SYS_NICE | / **
	//     * Use acct(2).
	//     * / SYS_PACCT | / **
	//     * <ul>
	//     * <li>Trace arbitrary processes using ptrace(2).
	//     * <li>Apply get_robust_list(2) to arbitrary processes.
	//     * <li>Inspect processes using kcmp(2).
	//     * </ul>
	//     * / SYS_PTRACE | / **
	//     * <ul>
	//     * <li>Perform I/O port operations (iopl(2) and ioperm(2)).
	//     * <li>Access /proc/kcore.
	//     * <li>Employ the FIBMAP ioctl(2) operation.
	//     * <li>Open devices for accessing x86 model-specific registers (MSRs, see msr(4)).
	//     * <li>Update /proc/sys/vm/mmap_min_addr.
	//     * <li>Create memory mappings at addresses below the value specified by /proc/sys/vm/mmap_min_addr.
	//     * <li>Map files in /proc/pci/bus.
	//     * <li>Open /dev/mem and /dev/kmem.
	//     * <li>Perform various SCSI device commands.
	//     * <li>Perform certain operations on hpsa(4) and cciss(4) devices.
	//     * <li>Perform a range of device-specific operations on other devices.
	//     * </ul>
	//     * / SYS_RAWIO | / **
	//     * <ul>
	//     * <li>Use reserved space on ext2 file systems.
	//     * <li>Make ioctl(2) calls controlling ext3 journaling.
	//     * <li>Override disk quota limits.
	//     * <li>Increase resource limits (see setrlimit(2)).
	//     * <li>Override RLIMIT_NPROC resource limit.
	//     * <li>Override maximum number of consoles on console allocation.
	//     * <li>Override maximum number of keymaps.
	//     * <li>Allow more than 64hz interrupts from the real-time clock.
	//     * <li>Raise msg_qbytes limit for a System V message queue above the limit in /proc/sys/kernel/msgmnb (see msgop(2) and msgctl(2)).
	//     * <li>Override the /proc/sys/fs/pipe-size-max limit when setting the capacity of a pipe using the F_SETPIPE_SZ fcntl(2) command.
	//     * <li>Use F_SETPIPE_SZ to increase the capacity of a pipe above the limit specified by /proc/sys/fs/pipe-max-size.
	//     * <li>Override /proc/sys/fs/mqueue/queues_max limit when creating POSIX message queues (see mq_overview(7)).
	//     * <li>Employ prctl(2) PR_SET_MM operation.
	//     * <li>Set /proc/PID/oom_score_adj to a value lower than the value last set by a process with CAP_SYS_RESOURCE.
	//     * </ul>
	//     * / SYS_RESOURCE | / **
	//     * <ul>
	//     * <li>Set system clock (settimeofday(2), stime(2), adjtimex(2)).
	//     * <li>Set real-time (hardware) clock.
	//     * </ul>
	//     * / SYS_TIME | / **
	//     * <ul>
	//     * <li>Use vhangup(2).
	//     * <li>Employ various privileged ioctl(2) operations on virtual terminals.
	//     * </ul>
	//     * / SYS_TTY_CONFIG | / **
	//     * Trigger something that will wake up the system (set CLOCK_REALTIME_ALARM and CLOCK_BOOTTIME_ALARM timers).
	//     * / WAKE_ALARM;
	public CapabilityElements getCapabilityAccess() {
		return eCapability;
	}
	
	public EnumRule getCapabilityRule() {
		return getCapabilityAccess().getRule();
	}

	//Bind:
	//	'-'
	//	location=STRING ':'
	//	volume=Volume ':'
	//	accessMode1=AccessMode;
	public BindElements getBindAccess() {
		return pBind;
	}
	
	public ParserRule getBindRule() {
		return getBindAccess().getRule();
	}

	//Volume:
	//	path=STRING;
	public VolumeElements getVolumeAccess() {
		return pVolume;
	}
	
	public ParserRule getVolumeRule() {
		return getVolumeAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
